<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Howto | Oh The Huge Manatee]]></title>
  <link href="http://ohthehugemanatee.github.io/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://ohthehugemanatee.github.io/"/>
  <updated>2016-11-05T12:37:40+01:00</updated>
  <id>http://ohthehugemanatee.github.io/</id>
  <author>
    <name><![CDATA[Campbell Vertesi (ohthehugemanatee)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Build a New Source for Drupal Migrate 8]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8/"/>
    <updated>2015-05-02T16:10:36+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8</id>
    <content type="html"><![CDATA[<p>This week I wanted to accomplish a task in Drupal 8 that would be simple in Drupal 7: Import several CSV files, each one related to the others by taxonomy terms. Most importantly, I wanted to do it with <a href="https://drupal.org/project/migrate">Migrate module</a>.</p>

<p>Migrate in Drupal 7 is a fantastic piece of code. It is not designed to be used from the GUI, rather, it provides a framework of &ldquo;source&rdquo;, &ldquo;destination&rdquo;, and &ldquo;migration&rdquo; classes so that even the most convoluted migration is 90% written for you. To create a migration in Drupal 7, you create a custom module, declare your migrations in a hook_info, and then extend the built in &ldquo;migration&rdquo; class. You instantiate one of the given classes for the source material (is it a CSV? JSON? Direct connection to a custom DB?), then one of the classes for the destination (is it a content type? Taxonomy term?). Then you add one simple line of code mapping each field from source to destination. If you know what you&rsquo;re doing, the task I had in mind shouldn&rsquo;t take more than 15 minutes per source.</p>

<p>It&rsquo;s not quite so easy in Drupal 8. First of all, with Migrate in core, we had to greatly simplify the goals for the module. The version of Migrate that is really functional and stable is specifically and <em>only</em> the basic framework. There is a separate migrate_drupal module to provide everything you need for migrating from Drupal 6 or 7. This has been a laser-tight focus on just the essentials, which means there&rsquo;s no UI, very little drush support, and definitely no nice extras like the ability to read non-Drupal sources.</p>

<p>My task this week became to write the first CSV source for Drupal 8 Migrate.</p>

<h1>Drupal 8 Migrate Overview</h1>

<p>Drupal 8 Migrations, when you&rsquo;re using classes that already exist, are actually even easier than Migrate 7. All you do is write a single YAML file for each kind of data you&rsquo;re transferring, and put it in a custom module&rsquo;s <em>config/install</em> directory. Your YAML file gives your migration a name and a group, tells us what the source is for data, maps source fields to destination fields, and tells us what the destination objects are. Here&rsquo;s an example Migration definition file from core. See if you can understand what&rsquo;s being migrated here.</p>

<p>``` yaml
id: d6_system_site
label: Drupal 6 site configuration
migration_groups:
  &ndash; Drupal 6
source:
  plugin: variable
  variables:</p>

<pre><code>- site_name
- site_mail
- site_slogan
- site_frontpage
- site_403
- site_404
- drupal_weight_select_max
- admin_compact_mode
</code></pre>

<p>process:
  name: site_name
  mail: site_mail
  slogan: site_slogan
  &lsquo;page/front&rsquo;: site_frontpage
  &lsquo;page/403&rsquo;: site_403
  &lsquo;page/404&rsquo;: site_404
  weight_select_max: drupal_weight_select_max
  admin_compact_mode: admin_compact_mode
destination:
  plugin: config
  config_name: system.site
```</p>

<p>You probably figured it out: this migration takes the system settings (variables) from a Drupal 6 site, and puts them into the Drupal 7 configuration. Not terribly hard, right? You can even do data transformations from the source field value to the destination.</p>

<p>Unfortunately, the only sources we have so far are for Drupal 6 and 7 sites, pulling directly from the database. If you want to use Migrate 8 the way we used Migrate 7, as an easy way to pull in data from arbitrary sources, you&rsquo;ll have to contribute.</p>

<h1>Writing a source plugin in Migrate_plus</h1>

<p>Enter <a href="https://www.drupal.org/sandbox/mikeryan/migrate_plus">Migrate Plus module</a>. This is the place in contrib, where we can fill out all the rest of the behavior we want from Migrate, that&rsquo;s not necessarily a core requirement. This is where we&rsquo;ll be writing our source plugin.</p>

<p>To add a source plugin, just create a .php file in migrate_plus/src/Plugins/migrate/source . Drupal will discover the new plugin automatically the next time you rebuild the cache. The filename has to be the same as the name of the class, so choose carefully! My file is called CSV.php . Here&rsquo;s the top of the file you need for a basic :</p>

<p>```php
&lt;?php
/<em>*
 * @file
 * Contains \Drupal\migrate_plus\Plugin\migrate\source\csv.
 </em>/</p>

<p>namespace Drupal\migrate_plus\Plugin\migrate\source;</p>

<p>use Drupal\migrate\Plugin\migrate\source\SourcePluginBase;</p>

<p>/<em>*
 * Source for CSV files.
 *
 * @MigrateSource(
 *   id = &ldquo;csv&rdquo;
 * )
 </em>/
class CSV extends SourcePluginBase {
```</p>

<p>I&rsquo;m calling this out separately because for newbies to Drupal 8, this is the hard part. This is all the information that Drupal needs to be able to find your class when it needs it. The @file comment is important. That and the namespace below have to match the actual location of the .php file.</p>

<p>Then you declare any other classes that you need, with their full namespace. To start with all you need is SourcePluginBase.</p>

<p>Finally you have to annotate the class with that @MigrateSource(id=&ldquo;csv&rdquo;). This is how Migrate module knows that this is a MigrateSource, and the name of your Plugin. Don&rsquo;t miss it!</p>

<p>Inside the class, you must have the following methods. I&rsquo;ll explain a bit more about each afterwards.</p>

<ul>
<li>initializeIterator() : Should return a valid Iterator object.</li>
<li>getIds() : Should return an array that defines the unique identifiers of your data source.</li>
<li>__toString() : Should return a simple, string representation of the source.</li>
<li>fields() : Should return a definitive list of fields in the source.</li>
<li>__construct() : You don&rsquo;t NEED this method, but you probably will end up using it.</li>
</ul>


<h2>initializeIterator()</h2>

<p>An Iterator is a complicated sounding word for an Object that contains everything you need to read from a data source, and go through it one line at a time. Maybe you&rsquo;re used to fopen(&lsquo;path/to/file&rsquo;, &lsquo;r&rsquo;) to open a file, and then you write code for every possible operation with that file. An iterator takes care of all that for you. In the case of most file-based sources, you can just use the SplFileObject class that comes with PHP.</p>

<p>Any arguments that were passed in the source: section of the YAML file will be available under $this->configuration. So if my YAML looks like this:</p>

<p><code>yaml
source:
  plugin: csv
  path: '/vagrant/import/ACS_13_1YR_B28002_with_ann.csv'
</code></p>

<p>My initializeIterator( ) method can look like this:</p>

<p>```php</p>

<p>public function initializeIterator() {
  // File handler using our custom header-rows-respecting extension of SPLFileObject.
  $file = new SplFileObject($this->configuration[&lsquo;path&rsquo;]);
  $file->setFlags(SplFileObject::READ_CSV);
  return $file;
}
```</p>

<p>Not too complicated, right? This method is called right at the beginning of the migration, the first time Migrate wants to get any information out of your source. The iterator will be stored in $this->iterator.</p>

<h2>getIds()</h2>

<p>This method should return an array of all the unique keys for your source. A unique key is some value that&rsquo;s unique for that row in the source material. Sometimes there&rsquo;s more than one, which is why this is an array. Each key field name is also an array, with a child &ldquo;type&rdquo; declaration. This is hard to explain in English, but easy to show in code:</p>

<p>```php
public function getIDs() {
  $ids = array();
  foreach ($this->configuration[&lsquo;keys&rsquo;] as $key) {</p>

<pre><code>$ids[$key]['type'] = 'string';
</code></pre>

<p>  }
  return $ids;
}
```</p>

<p>We rely on the YAML author to tell us the key fields in the CSV, and we just reformat them accordingly. Type can be &lsquo;string&rsquo;, &lsquo;float&rsquo;, &lsquo;integer&rsquo;, whatever makes sense.</p>

<h2>__toString()</h2>

<p>This method has to return a simple string explanation of the source query. In the case of a file-based source, it makes sense to print the path to the file, like this:</p>

<p><code>php
public function __toString() {
  return (string) $this-&gt;query;
}
</code></p>

<h2>fields()</h2>

<p>This method returns an array of available fields on the source. The keys should be the machine names, the values are descriptive, human-readable names. In the case of the CSV source, we look for headers at the top of the CSV file and build the array that way.</p>

<h2>__construct()</h2>

<p>The constructor method is called whenever a class is instantiated. You don&rsquo;t technically HAVE to have a constructor on your source class, but you&rsquo;ll find it helpful. For the CSV source, I used the constructor to make sure we have all the configuration that we need. Then I try and set sane values for fields, based on any header in the file.</p>

<p>```php
public function <strong>construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration) {
  parent::</strong>construct($configuration, $plugin_id, $plugin_definition, $migration);</p>

<p>  // Path is required.
  if (empty($this->configuration[&lsquo;path&rsquo;])) {</p>

<pre><code>return new MigrateException('You must declare the "path" to the source CSV file in your source settings.');
</code></pre>

<p>  }</p>

<p>  // Key field(s) are required
  if (empty($this->configuration[&lsquo;keys&rsquo;])) {</p>

<pre><code>return new MigrateException('You must declare the "keys" the source CSV file in your source settings.');
</code></pre>

<p>  }</p>

<p>  // Set header rows from the migrate configuration.
  $this->headerRows = !empty($this->configuration[&lsquo;header_rows&rsquo;]) ? $this->configuration[&lsquo;header_rows&rsquo;] : 0;</p>

<p>  // Figure out what CSV columns we have.
  // One can either pass in an explicit list of column names to use, or if we have
  // a header row we can use the names from that
  if ($this->headerRows &amp;&amp; empty($this->configuration[&lsquo;csvColumns&rsquo;])) {</p>

<pre><code>$this-&gt;csvColumns = array();

// Skip all but the last header
for ($i = 0; $i &lt; $this-&gt;headerRows - 1; $i++) {
  $this-&gt;getNextLine();
}

$row = $this-&gt;getNextLine();
foreach ($row as $key =&gt; $header) {
  $header = trim($header);
  $this-&gt;getIterator()-&gt;csvColumns[] = array($header, $header);
}
</code></pre>

<p>  }
  elseif ($this->configuration[&lsquo;csvColumns&rsquo;]) {</p>

<pre><code>$this-&gt;getIterator()-&gt;csvColumns = $this-&gt;configuration['csvColumns'];
</code></pre>

<p>  }
}
```</p>

<h2>Profit!</h2>

<p>That&rsquo;s it! Four simple methods, and you have a new source type for Drupal 8 Migrate. Of course, you will probably find complications that require a bit more work. For CSV, supporting a header row turned out to be a real pain. Any time Migrate tried to &ldquo;rewind&rdquo; the source back to the first line, it would try and migrate the header row! I ended up extending SplFileObject just to handle this issue.</p>

<p>Here&rsquo;s the YAML file I used to test this, importing a list of states from some US Census data.</p>

<p>```yaml
id: states
label: States
migration_groups:
  &ndash; US Census</p>

<p>source:
  plugin: csv
  path: &lsquo;/vagrant/import/ACS_13_1YR_B28002_with_ann.csv&rsquo;
  header_rows: 2
  fields:</p>

<pre><code>- Id2
- Geography
</code></pre>

<p>  keys:</p>

<pre><code>- Id2
</code></pre>

<p>process:
  name: Geography
  vid:</p>

<pre><code>-
  plugin: default_value
  default_value: state
</code></pre>

<p>destination:
  plugin: entity:taxonomy_term
```</p>

<p>You can see my CSV source and Iterator in the <a href="https://www.drupal.org/node/2458003">issue queue for migrate_plus</a>. Good luck, and happy migrating!</p>

<h2>Thanks</h2>

<p>I learned a lot this week. Big thanks to the <a href="https://www.drupal.org/node/2127611">Migrate Documentation</a>, but especially to <a href="https://www.drupal.org/u/chx">chx</a>, <a href="https://www.drupal.org/u/mikeryan">mikeryan</a>, and the other good folks in #drupal-migrate who helped set me straight.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Remove a Drupal Install Profile]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2014/01/07/how-to-remove-a-drupal-install-profile/"/>
    <updated>2014-01-07T13:23:45+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2014/01/07/how-to-remove-a-drupal-install-profile</id>
    <content type="html"><![CDATA[<p><a href="https://drupal.org/project/install_profile_api">Install profiles</a> are a great way to throw together a functional Drupal site really quickly. In Drupal 6, an Install Profile was just a blueprint for setting up a site really quickly. What you did after the site was installed was your own business! But in Drupal 7 profiles are much more integrated with core. The assumption is that when you use an install profile, you want to rely on the profile&rsquo;s maintainer for all your updates. This is not always the case.</p>

<p>Very often your site will diverge from the install profile as it takes on a life of its own, and it will be useful to convert it to &ldquo;vanilla&rdquo; Drupal. Today I&rsquo;ll use a relatively simple example of a musician site which is moving away from the <a href="https://drupal.org/project/pushtape">Pushtape</a> distribution. Later I&rsquo;ll return to this subject with the much more in-depth example of moving a community site away from <a href="https://drupal.org/project/commons">Drupal Commons</a>.</p>

<h2>Move things around</h2>

<p>Install profiles have all their files stored in the site root&rsquo;s <em>profiles/</em> directory. The first step is going to be moving everything out of there. In the case of pushtape, we have libraries, modules, and a theme stored in there. We&rsquo;re going to move them to a more normal location.</p>

<p>``` console</p>

<h1>mkdir sites/all/libraries</h1>

<h1>mv profiles/pushtape/libraries/* sites/all/libraries</h1>

<h1>mkdir sites/all/modules/custom</h1>

<h1>mv profiles/pushtape/modules/pushtape_* sites/all/modules/custom</h1>

<h1>mv profiles/pushtape/modules/* sites/all/modules</h1>

<h1>mkdir sites/all/themes</h1>

<h1>mv profiles/pushtape/themes/* sites/all/themes</h1>

<p>```</p>

<p>Next we need to see if there are any variables set in the install profile which really depend on the profile directory. If there are, we&rsquo;ll have to set them again with the new path.</p>

<p>``` console</p>

<h1>cd profiles/pushtape</h1>

<h1>grep &lsquo;profiles/pushtape&rsquo; * -R</h1>

<p>pushtape.install:  variable_set(&lsquo;sm2_path&rsquo;, &lsquo;profiles/pushtape/libraries/soundmanager2&rsquo;);
```</p>

<p>In this case, we see one variable_set which tells the system where to find the soundmanager2 library. We can update that easily enough with drush:</p>

<p>``` console</p>

<h1>drush vset sm2_path &lsquo;sites/all/libraries/soundmanager2&rsquo;</h1>

<p>```</p>

<p>Now we have to update Drupal&rsquo;s setting for which install profile was used to create the site.</p>

<p>``` console</p>

<h1>drush vset install_profile standard</h1>

<p>```</p>

<p>In some cases this will be enough to work. Personally I like to keep my modules folder more organized, so I go the extra mile:</p>

<p>``` console</p>

<h1>cd sites/all/modules</h1>

<h1>mkdir contrib</h1>

<h1>mv !(custom|contrib) contrib</h1>

<p>```</p>

<p>I also separated out the custom code from the features. You can figure out which custom modules implement features with <em>find . |grep features</em>, and move them into a separate directory manually.</p>

<h2>Clearing caches</h2>

<p>Once you&rsquo;re done moving things around, CLEAR CACHES. Drupal keeps an index of module, library, and theme directories, and you just broke it.</p>

<p><code>
drush cc all
</code></p>

<p>The only problem is, in many cases you will have moved a module that is required for drupal bootstrap. So you&rsquo;ll have to get the handy drush tool <a href="https://drupal.org/project/registry_rebuild">Registry Rebuild</a>, and run that before your cache clear:</p>

<p>``` console</p>

<h1>drush dl registry_rebuild</h1>

<h1>drush rr</h1>

<h1>drush cc all</h1>

<p>```</p>

<h2>Extra Cleanup</h2>

<p>As commenter @ericaitala notes, you may need some followup cleanup to really get all traces out. The easiest way to do this is from the SQL command line, which you can access via drush:</p>

<p><code>
drush sqlq "DELETE FROM `system` WHERE filename LIKE 'profiles/profilename/profilename.profile"
drush sqlq "UPDATE `system` SET status=1 WHERE filename LIKE 'profiles/standard/standard.profile'"
</code></p>

<p>Technically these should both be covered by the registry_rebuild operation, but we&rsquo;re doing it by hand because it seems to be missed in some operations. The first command removes the entry for the profile from Drupal&rsquo;s system table &ndash; it removes any knowledge Drupal has that there was an install profile there. The second tells Drupal that the &ldquo;standard&rdquo; install profile is active, and should be checked for updates.</p>

<p>That&rsquo;s it &ndash; your site is now officially a vanilla Drupal install. Test by removing the profiles/pushtape directory, clearing caches, and browsing around your site.</p>

<p><em>NOTE: With a more complex install profile I expect to encounter more difficulty. Stay tuned for the post on extricating yourself from Commons later this year!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create a Custom Panels Pane]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2014/01/03/how-to-create-a-custom-panels-pane/"/>
    <updated>2014-01-03T13:09:11+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2014/01/03/how-to-create-a-custom-panels-pane</id>
    <content type="html"><![CDATA[<p>Lots of sites are now built with the &ldquo;Panels everywhere&rdquo; method, using <a href="https://www.drupal.org/project/panels">Panels</a> and <a href="https://www.drupal.org/project/panelizer">Panelizer</a> to configure modular layouts in the Drupal GUI. These modules come with lots of great default Panes, and create even more defaults based on your existing Blocks and Views. But there&rsquo;s always a case for a custom Pane.</p>

<p>As usual, I&rsquo;ll assume that you have an empty custom module called <em>mymodule</em>, with only a <em>.info</em> and a <em>.module</em> file to its name.</p>

<h2>1) Tell CTools that you have custom code here</h2>

<p>Ctools, like Views, needs a hook to declare the fact that you have custom code. To do this we&rsquo;ll use <em><a href="http://drupalcontrib.org/api/drupal/contributions!ctools!ctools.api.php/function/hook_ctools_plugin_directory/7">hook_ctools_plugin_directory</a></em>. This hook is invoked for all Ctools plugin types, and includes the module name as a variable. This way you can avoid eating up memory for anything except the targeted module. You also have to declare where your custom code will live. So here&rsquo;s the complete content of <em>mymodule.module</em>:</p>

<p>``` php mymodule.module
&lt;?php</p>

<p>/<em>*
 * Implements hook_ctools_plugin_directory().
 </em>/
function mymodule_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == &lsquo;ctools&rsquo; &amp;&amp; $plugin_type == &lsquo;content_types&rsquo;) {</p>

<pre><code>return 'plugins/content_types';
</code></pre>

<p>  }
}
```</p>

<p>Note: <strong>Do not confuse Ctools &ldquo;Content Types&rdquo; with the &ldquo;Content Type&rdquo; entity used elsewhere in Drupal.</strong> This is just confusing naming, but they&rsquo;re totally different things. Actually the most common usage for a Ctools Content Type is a pane, just like what we&rsquo;re doing now. There are other plugin types, but none that interest us in this post.</p>

<h2>2) Add your custom pane</h2>

<p>Oh, did you think this would be more difficult? Now that we&rsquo;ve told Ctools to look for Content Type plugins in our module&rsquo;s <em>plugins/content_types</em> subdirectory, we just add a <em>.inc</em> file for each &ldquo;Content Type&rdquo; (aka Pane) that we want to add. Let&rsquo;s do a simple one, which returns the root term of a given taxonomy term. All the following code will go in <em>plugins/content_types/taxonomy_root_term.inc</em> (a name I chose arbitrarily).</p>

<p>Right at the top of the file, we provide a <em>$plugin</em> array which defines the basic information about our <del>Pane</del> Ctools Content Type. This doesn&rsquo;t go into a function or anything, it just sits at the top of the <em>.inc</em> file:</p>

<p>``` php plugins/content_types/taxonomy_root_term.inc
&lt;?php</p>

<p>$plugin = array(
  &lsquo;single&rsquo; => TRUE,
  &lsquo;title&rsquo; => t(&lsquo;Taxonomy root term&rsquo;),
  &lsquo;description&rsquo; => t(&lsquo;a Display of data from the root term of the given TID&rsquo;),
  &lsquo;category&rsquo; => t(&lsquo;Custom Panes&rsquo;),
  &lsquo;edit form&rsquo; => &lsquo;mymodule_taxonomy_root_term&rsquo;,
  &lsquo;render callback&rsquo; => &lsquo;mymodule_taxonomy_root_term_render&rsquo;,
  &lsquo;admin info&rsquo; => &lsquo;mymodule_taxonomy_root_term_info&rsquo;,
  &lsquo;defaults&rsquo; => array(),
  &lsquo;all contexts&rsquo; => TRUE,
);
```</p>

<p>As you can see, this array defines a category, title, and description for the Panels admin interface. It also declares the names of the callbacks which provide the pane&rsquo;s edit form, rendered form, and admin info. &ldquo;Single&rdquo; means that this type has no sub-types. This is the case in every single custom pane I&rsquo;ve ever seen, so it&rsquo;s probably the case for yours as well.</p>

<p>Now we write the callbacks we named in that array. We&rsquo;ll start with the edit form.</p>

<p>``` php plugins/content_types/taxonomy_root_term.inc</p>

<p>/<em>*
 * Edit form.
 </em>/
function mymodule_taxonomy_root_term($form, &amp;$form_state) {
 $conf = $form_state[&lsquo;conf&rsquo;];</p>

<p> $form[&lsquo;term&rsquo;] = array(
   &lsquo;#type&rsquo; => &lsquo;textfield&rsquo;,
   &lsquo;#title&rsquo; => t(&lsquo;Term ID&rsquo;),
   &lsquo;#description&rsquo; => t(&lsquo;The term, from which the root term will be displayed&rsquo;),
   &lsquo;#default_value&rsquo; => $conf[&lsquo;term&rsquo;],
 );</p>

<p>  $entity_info = entity_get_info(&lsquo;taxonomy_term&rsquo;);</p>

<p>  $options = array();
  if (!empty($entity_info[&lsquo;view modes&rsquo;])) {</p>

<pre><code>foreach ($entity_info['view modes'] as $mode =&gt; $settings) {
  $options[$mode] = $settings['label'];
}
</code></pre>

<p>  }</p>

<p> $form[&lsquo;view_mode&rsquo;] = array(
   &lsquo;#type&rsquo; => &lsquo;select&rsquo;,
   &lsquo;#options&rsquo; => $options,
   &lsquo;#title&rsquo; => t(&lsquo;View mode&rsquo;),
   &lsquo;#default_value&rsquo; => $conf[&lsquo;view_mode&rsquo;],
 );</p>

<p> return $form;
}
```</p>

<p>This is a fairly standard Drupal form. It also goes through typical form validation and submission functions, so you can provide a pretty complete experience for the administrator. In our case, we just want to get the term ID of the term whose root parent should be displayed. We let the administrator enter the term ID, and the view mode which should be used to display it. We won&rsquo;t worry about form validation in our example. Let&rsquo;s move on to the Submit function:</p>

<p><code>php plugins/content_types/taxonomy_root_term.inc
/**
 * Edit form submit function.
 */
function mymodule_taxonomy_root_term_submit($form, &amp;$form_state) {
  $form_state['conf']['term'] = $form_state['values']['term'];
  $form_state['conf']['view_mode'] = $form_state['values']['view_mode'];
}
</code></p>

<p>Again, pretty simple stuff. We just make sure that the <em>$form_state[&lsquo;conf&rsquo;]</em> has the values entered. Now, the next callback we defined in <em>$plugin</em> is for rendering the pane:</p>

<p>``` php plugins/content_types/taxonomy_root_term.inc
/<em>*
 * Render the panel.
 </em>/
function mymodule_taxonomy_root_term_render($subtype, $conf, $args, $contexts) {
  if ($context->empty) {</p>

<pre><code>return;
</code></pre>

<p>  }
  // Get full term object for the root term.
  $term = ctools_context_keyword_substitute($conf[&lsquo;term&rsquo;], array(), $contexts);
  $parent_array = taxonomy_get_parents_all($term);
  $root = end($parent_array);</p>

<p>  // Render as a block.
  $block = new stdClass();
  $block->module = &lsquo;entity&rsquo;;
  $block->delta = &lsquo;taxonomy_term-&rsquo; . str_replace(&lsquo;&ndash;&rsquo;, &lsquo;_&rsquo;, $conf[&lsquo;view_mode&rsquo;]);</p>

<p>  $entity = entity_load_single(&lsquo;taxonomy_term&rsquo;, $root->tid);
  $block->content = entity_view(&lsquo;taxonomy_term&rsquo;, array($root), $conf[&lsquo;view_mode&rsquo;]);
  return $block;</p>

<p>}
```</p>

<p>First we make sure there is information &ndash; ie the taxonomy term ID we need &ndash; in the pane&rsquo;s context. Then we get the root term object and render it in the requested display mode. The only requirement for the return here is that it be a <a href="https://drupal.org/node/930760">Drupal render array</a>. So depending on your use case, you can return an image, a field&hellip; whatever you like. In most cases a block is a convenient wrapper for whatever you have to return, which is what I did here.</p>

<p>This is as far as you have to go. The admin info callback isn&rsquo;t actually required, just don&rsquo;t include it in the <em>$plugin</em> array and you&rsquo;ll be fine. But if you want to make your life easier as a site admin, it&rsquo;s definitely a nice to have.</p>

<p>``` php plugins/content_types/taxonomy_root_term.inc
/<em>*
 * Admin info.
 </em>/
function mymodule_taxonomy_root_term_info($subtype, $conf, $contexts) {
  if (!empty($conf)) {</p>

<pre><code>$content = '&lt;p&gt;&lt;b&gt;Term ID:&lt;/b&gt; ' . $conf['term'] . '&lt;/p&gt;';
$content = '&lt;p&gt;&lt;b&gt;View mode:&lt;/b&gt; ' . $conf['view_mode'] . '&lt;/p&gt;';

$block = new stdClass;
$block-&gt;title = $conf['override_title'] ? $conf['override_title_text'] : '';
$block-&gt;content = $content;
return $block;
</code></pre>

<p>  }
}
```</p>

<p>This just provides the administrative summary which you can see in the Panels UI. Again, Panels will be happy with any render array return you throw at it, so I use a block.</p>

<h2>This is why we have nice things</h2>

<p>Anyone who&rsquo;s worked with me knows that I&rsquo;m not a huge fan of the panels everywhere approach. But I use it often, simply because it makes custom layouts and totally custom page pieces so easy to do. Duplicating even this very simple functionality in a block is actually harder than this. You&rsquo;re still using about 3 functions, but you&rsquo;d have to determine in advance where that TID will come from. It would certainly come out less flexible, and actually probably harder to maintain. With Ctools all your related code sits in one place, and your module structure actually helps you see what&rsquo;s going on where.</p>

<p>If you learn how to do elements like this, you&rsquo;ll find Panels creeping into more and more of your builds. And rightfully so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[44,497 People Are Wrong: How to NEVER Need Views PHP.]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2013/12/26/44497-people-are-wrong-how-to-never-use-views-php/"/>
    <updated>2013-12-26T12:01:44+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2013/12/26/44497-people-are-wrong-how-to-never-use-views-php</id>
    <content type="html"><![CDATA[<p>You&rsquo;re building a View, but you can&rsquo;t get that field to display the way you want it to. Or filter, or sort. Or maybe you have some data in a custom table that you want to include in the View. So you look for a contributed module, and <a href="https://www.drupal.org/project/views_php">Views PHP</a> looks like the answer to your problem! Until you read the module page, where it says:</p>

<blockquote><p>&ldquo;&hellip;it is highly advisable to use regular handlers and plugins when available (or even to create one yourself). Take note that filtering and sorting a view using PHP always has a considerable perfomance impact.&rdquo;</p></blockquote>

<p>As of this writing, <em>44,497</em> site maintainers have read that warning and chosen to ignore it. <strong>They&rsquo;ve chosen to put their PHP into a non-revisioned, difficult-to-access place, and to enable PHP input in a module that was never designed for security. They&rsquo;ve left their site at risk of a very difficult to diagnose and even harder to fix WSOD</strong>.</p>

<p>I&rsquo;m going to go out on a limb here, and suggest that in many of these cases, the decision was made because someone had the impression that writing a Views handler or Plugin was difficult. I&rsquo;m here to tell you that&rsquo;s not so: it&rsquo;s actually quite easy.</p>

<h2>What we&rsquo;re doing </h2>

<p>We&rsquo;re going to tell Views about the structure of the data we want to display, filter, or sort &ndash; even if there&rsquo;s not actually a new data source involved, that&rsquo;s how you do it &ndash; and then we&rsquo;ll write the function that actually does the filter/sort/etc by improving an existing field display/filter/sort that Views already includes.</p>

<p>This process will work for:</p>

<ul>
<li>Defining a new data source for Views, ie something your module keeps in the DB.</li>
<li>Creating multiple field displays/filters/sorts for an existing field.</li>
<li>Creating a completely computed field display/filter/sort, with nothing in the DB.</li>
</ul>


<p>I know that in 99% of use cases for Views PHP, you don&rsquo;t need to define a new data source, table, adn fields. Trust me that this is the easiest way to learn it, though. I promise we&rsquo;ll get to your use case before the end of the post.</p>

<h1>How to</h1>

<p>I&rsquo;ll assume you have a custom module built, with a .info and .module file, but nothing in there yet. We&rsquo;ll call our module &ldquo;mymodule&rdquo; for the example.</p>

<h2>1) Tell Views about your module</h2>

<p>We implement <em><a href="https://api.drupal.org/api/views/views.api.php/function/hook_views_api/7">hook_views_api</a></em> to let Views know that our module provides some code for Views, and what version of the Views API we&rsquo;re using.</p>

<p>``` php mymodule.module
&lt;?php</p>

<p>/<em>*
 * Implements hook_views_api().
 </em>/
function mymodule_views_api() {
  return array(</p>

<pre><code>'api' =&gt; 3,
'path' =&gt; drupal_get_path('module', 'mymodule') . '/views',
</code></pre>

<p>  );
}
```</p>

<p>Couldn&rsquo;t be simpler. We declare that we&rsquo;re using Views API 3, and that our Views code will all live in the <em>/views</em> subdirectory of our module.</p>

<h2>2) Tell Views about your custom code</h2>

<p>Now that Views knows to look in our <em>/views</em> directory, we should populate it. Views will look for a file called <em>modulename.views.inc</em> in that directory, so this is where we will put our Views hooks. There are lots of Views interventions you can do in this file, but we&rsquo;re only interested in one: <em><a href="https://api.drupal.org/api/views/views.api.php/function/hook_views_data/7">hook_views_data</a></em>.</p>

<p>This hook lets you define new data sources to Views, and for each one show how to render a field, how to Filter results, and how to Sort results based on your new data source. I promised you three use cases up there though, and here&rsquo;s the trick: you don&rsquo;t have to have an actual data source. You can define a filter for a database field that&rsquo;s already described elsewhere.</p>

<p>First let&rsquo;s look at a real field definiton though, because it&rsquo;s simpler. Here&rsquo;s how we would define a real DB table as a data source. The table looks like this:</p>

<table style="border-collapse:collapse;">
<tr><th>naid</th><th>name</th></tr>
<tr><td>1</td><td>Frank Sinatra</td></tr> 
<tr><td>2</td><td>Dean Martin</td></tr>
<tr><td>3</td><td>Sammy Davis, Jr.</td></tr> 
<tr><td>4</td><td>Peter Lawford</td></tr>
<tr><td>5</td><td>Joey Bishop</td></tr>
</table>


<p>So here&rsquo;s our implementation of <em>hook_views_data</em>:</p>

<p>``` php views/mymodule.views.inc
/<em>*
 * Implements hook_views_data().
 </em>/
function mymodule_views_data() {
  // Build an array named after each DB table you&rsquo;re describing. In our case,
  // just mymodule_table.
  $data[&lsquo;mymodule_table&rsquo;] = array(</p>

<pre><code>// First give some general information about the table as a data source.
'table' =&gt; array(
  // The grouping for this field/filter/sort in the Views UI.
  'group' =&gt; t('Example Views Stuff'),
  'base' =&gt; array(
    'field' =&gt; 'naid', // This is the identifier field for the view.
    'title' =&gt; t('Example Views API Data'),
    'help' =&gt; t('Names provided by the Mymodule module.'),
  ),
),
// Now we describe each field that Views needs to know about, starting 
// with the identifier field.
'naid' =&gt; array(
  'title' =&gt; t('Name ID'),
  'help' =&gt; t("The unique Name ID."),
  'field' =&gt; array(
    'handler' =&gt; 'views_handler_field_numeric',
    'click sortable' =&gt; TRUE,
  ),
  'sort' =&gt; array(
    'handler' =&gt; 'views_handler_sort',
  ),
  'filter' =&gt; array(
    'handler' =&gt; 'views_handler_filter_numeric',
  ),
),
// Now the name field.
'name' =&gt; array(
  'title' =&gt; t('Name'),
  'help' =&gt; t("The Name."),
  'field' =&gt; array(
    'handler' =&gt; 'views_handler_field',
    'click sortable' =&gt; TRUE,
  ),
  'sort' =&gt; array(
    'handler' =&gt; 'views_handler_sort',
  ),
  'filter' =&gt; array(
    'handler' =&gt; 'views_handler_filter_string',
  ),
),
</code></pre>

<p>  );
  return $data;
}
```</p>

<p>This is a pretty simple example, and I think the array structure speaks for itself. First you provide some general information about the table, then you create a sub-array for each field on the table. Each field&rsquo;s array should be named after the field, and provide at least title. Of course it wouldn&rsquo;t be useful if you didn&rsquo;t describe the handlers for any field/sort/filter operations you want to expose. For each one of these you just provide the name of the handler. In this example I used all built-in filters that come with Views, but it&rsquo;s easy enough to provide a custom handler.</p>

<p>Many added behaviors in Views start with <em>hook_views_data</em>; this only covers the basics. You can also open fields up as arguments or relationships, or even add built-in relationships. For example, if our table also contained an NID field, we could define a relationship so that node fields are always available when listing names, and vice versa. This stuff is all surprisingly easy to do, it&rsquo;s just not the focus of this post.</p>

<h2>3) Write your custom handler</h2>

<p>Let&rsquo;s say we want to provide our own field handler for the name field. Maybe we want it to automatically separate first names. This is easy, too! You simply decide on a name for your new handler &ndash; by convention it should begin with <em>modulename_handler_type_</em>, so we&rsquo;ll use <em>mymodule_handler_field_firstname</em>. Here&rsquo;s the relevant part of that <em>$data</em> array from before:</p>

<p>``` php /views/mymodule.views.inc
&hellip;</p>

<pre><code>// Now the name field.
'name' =&gt; array(
  'title' =&gt; t('Name'),
  'help' =&gt; t("The Name."),
  'field' =&gt; array(
    'handler' =&gt; 'mymodule_handler_field_firstname',
    'click sortable' =&gt; TRUE,
  ),
</code></pre>

<p>&hellip;
```</p>

<p>Not exactly rocket science, is it?</p>

<p>Now we create a file named after the handler, also in the <em>/views</em> subdirectory. Though you could write your own handler class from scratch, you&rsquo;ll almost never have to. It&rsquo;s much easier to just extend an existing class.</p>

<p>``` php /views/mymodule_handler_field_firstname.inc
&lt;?php</p>

<p>/<em>*
 * @file
 * Definition of mymodule_handler_field_firstname.
 </em>/</p>

<p>/<strong>
 * Provide the first name only from the name field.
 *
 * @ingroup views_filter_handlers
 */
class mymodule_handler_field_firstname extends views_handler_field {
  /</strong>
  * Render the name field.
  */
  public function render($values) {</p>

<pre><code>$value = $this-&gt;get_value($values);
$return = explode(' ', $value);
return 'First name: ' . $return['0'];
</code></pre>

<p>  }
}
```</p>

<p>You see the pattern we&rsquo;re following: just name a handler, then extend an existing Views handler class to do what you want. You can override options forms, the admin summary&hellip; really any aspect of the way Views handles this data. And the pattern is the same for fields, sorts, filters, and arguments.</p>

<p>Once you&rsquo;ve created your handler&rsquo;s <em>.inc</em> file, you have to make sure your module loads it. So edit your module&rsquo;s <em>.info</em> file thusly:</p>

<p>``` ini /mymodule.info
name = My Module
description = Demo module from ohthehugemanatee.org
core = 7.x</p>

<p>files[] = views/mymodule_handler_field_firstname.inc
```</p>

<h2>4) Multiple filters for one field</h2>

<p>We all understand how this works for data that you&rsquo;re declaring for the first time in Views. But what if you want to provide multiple handlers for a single field? Maybe there are several different ways to filter or sort it. For most use cases, you should just follow the pattern above, and simply override the Views options form in your handler class. But occasionally you really do need multiple handlers.</p>

<p>So let&rsquo;s add a second and third field handler for our <em>name</em> field:</p>

<p>``` php /views/mymodule.views.inc
&hellip;</p>

<pre><code>// Now the name field. This is the first, and 'real' definition for this field.
'name' =&gt; array(
  'title' =&gt; t('Name'),
  'help' =&gt; t("The Name."),
  'field' =&gt; array(
    'handler' =&gt; 'mymodule_handler_field_firstname',
    'click sortable' =&gt; TRUE,
  ),
),
'name_last' =&gt; array(
  'title' =&gt; t('Last name'),
  'help' =&gt; t('The Last name, extracted from the Name field'),
  'real field' =&gt; 'name',
  'field' =&gt; array(
    'handler' =&gt; 'mymodule_handler_field_lastname',
    'click sortable' =&gt; TRUE,
  ),
),
'name_backwards' =&gt; array(
  'title' =&gt; t('Evil Genius Name'),
  'help' =&gt; t('The name, reversed so it sounds like the name of an evil genius.'),
  'real field' =&gt; 'name',
  'field' =&gt; array(
    'handler' =&gt; 'mymodule_handler_field_evil',
    'click sortable' =&gt; TRUE,
    ),
  ),
</code></pre>

<p>&hellip;
```</p>

<p>Can you spot the difference? All you have to do is add a variable for <em>real field</em>, which tells Views the field name to use for the source value, and that&rsquo;s it. Everything else is totally identical to a normal field. By custom we prefix the &ldquo;virtual&rdquo; field&rsquo;s name with the name of the real field, but that&rsquo;s as complicated as it gets.</p>

<h1>Conclusion</h1>

<p>If there&rsquo;s one thing I want you to take away from this blog post, it&rsquo;s that <strong>the Views API is actually really easy</strong>. And if you can&rsquo;t find something online, take a moment to actually look at the <a href="https://api.drupal.org/api/views/views.api.php/">API documentation included with the module</a>. It&rsquo;s <em>very</em> thorough, and easy to read. If you feel like you understand how this works, but the doco doesn&rsquo;t quite cover what you&rsquo;re trying to do, look for examples in the Views module itself! There are 169 handlers for every concievable kind of case, just within Views. Find something reasonable and build off of that!</p>

<p>With this in mind, it&rsquo;s only 24 lines of simple code to provide your own handler for an existing field. After that 24 lines, you&rsquo;re doing the same things you were planning to do in views_php&hellip; but now you&rsquo;re doing them in a real coding environment, with a revisioning system, and where it&rsquo;s easy to track down and fix errors that could otherwise crash your site. 24 lines of array definition can save you a world of hurt. I hope to see those views_php installation numbers dropping soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Context Conditions]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2013/12/02/custom-context-conditions/"/>
    <updated>2013-12-02T15:06:49+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2013/12/02/custom-context-conditions</id>
    <content type="html"><![CDATA[<p>One of the big advantages to using the <a href="https://drupal.org/project/context" title="Context Module on drupal.org">Context module</a> is how totally extensible it is. Not only can you use and re-use the built in conditions, you can write your own. This brings all the power of the custom PHP evaluation method of block placement, but in a structure that makes your code re-usable, contributable, versioned, and standards-based. Writing a custom Context Condition is also a great template for how to integrate custom behaviors in many of the more complex Drupal modules such as Views and Search_API. We&rsquo;ll see this pattern again and again, and this is about the most basic one to demonstrate with.</p>

<p>My task was to determine if the displayed node was entity-referenced as being the &ldquo;special&rdquo; node from it&rsquo;s parent organic group. It&rsquo;s a weird requirement (which is exactly why a custom Condition makes sense here), so let me explain that again. On a site with Organic Groups, the Group node has an entityreference field, which marks one of the Group member nodes as special. When the user is viewing this special node, our Rules condition should evaluate to positive.</p>

<p>The first prerequisite is to make absolutely certain that you can&rsquo;t do this using any of the built in Conditions, and something this unique definitely qualifies there. So let&rsquo;s get to the implementation in our custom module. The module will be called CCC for Custom Context Condition.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ccc.info  (ccc.info)</span> <a href='/downloads/code/modules/ccc/ccc.info'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ini'><span class='line'><span class="na">name</span> <span class="o">=</span> <span class="s">CCC (Custom Context Condition) Example Module</span>
</span><span class='line'><span class="na">description</span> <span class="o">=</span> <span class="s">Provides a custom Context Condition</span>
</span><span class='line'><span class="na">core</span> <span class="o">=</span> <span class="s">7.x</span>
</span><span class='line'><span class="na">version</span> <span class="o">=</span> <span class="s">7.x-1.x</span>
</span><span class='line'><span class="na">package</span> <span class="o">=</span> <span class="s">Custom</span>
</span><span class='line'>
</span><span class='line'><span class="na">dependencies[]</span> <span class="o">=</span> <span class="s">entityreference</span>
</span><span class='line'><span class="na">dependencies[]</span> <span class="o">=</span> <span class="s">context</span>
</span><span class='line'><span class="na">dependencies[]</span> <span class="o">=</span> <span class="s">og</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That&rsquo;s a totally normal .info file, with logical dependencies on OG, EntityReference, and Context modules. Let&rsquo;s have a look at the .module file. This is probably a lot simpler than you expected.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ccc.module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="nx">Impelements</span> <span class="nx">hook_context_plugins</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">function</span> <span class="nf">ccc_context_plugins</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$plugins</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s1">&#39;ccc_condition_og_special_node&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;handler&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;path&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">drupal_get_path</span><span class="p">(</span><span class="s1">&#39;module&#39;</span><span class="p">,</span> <span class="s1">&#39;ccc&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/plugins/context&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;file&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;ccc_condition_og_special_node.inc&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;class&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;ccc_condition_og_special_node&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;parent&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;context_condition&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$plugins</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>First we implement <em>hook_context_plugins()</em>, to declare our new condition plugin to Context. This function should return an array of plugins, keyed by plugin name (in our case, ccc_condition_og_special_node). For each plugin, you have to explain to Context some basic information about the handler you&rsquo;re going to write.</p>

<ul>
<li><strong>path</strong> The path to the plugin file. By convention you should put it in your module&rsquo;s directory, under /plugins/context.</li>
<li><strong>file</strong> The filename to look for. Keep yourself sane, and name it after the plugin you&rsquo;re writing.</li>
<li><strong>class</strong> The name of the Class you&rsquo;re about to write. If you&rsquo;ve never written a PHP class before, this is good practice for D8 and object oriented code in general. Think of it like a function name, and again: name it after the plugin you&rsquo;re writing.</li>
<li><strong>parent</strong> The Class you are extending to create your condition. If you don&rsquo;t know what to put here, just enter &lsquo;context_condition&rsquo;.</li>
</ul>


<p>Now that Context knows about your plugin, you have to declare it to the UI in order to use it! For this we implement <em>hook_context_registry</em>. This function returns an array keyed by plugin type&mdash;in this case, &ldquo;conditions&rdquo;. For each condition (keyed by condition name), we need title, description, and plugin.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ccc.module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="k">Implements</span> <span class="nx">hook_context_registry</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">function</span> <span class="nf">ccc_context_registry</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$registry</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s1">&#39;conditions&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;ccc_condition_og_special_node&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;title&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;OG Special Node&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;description&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Set this context based on whether or not the node is the &quot;Special Node&quot; entityreferenced in the parent OG.&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;plugin&#39;</span> <span class="o">=&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="s1">&#39;ccc_condition_og_special_node&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'><span class="p">),</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$registry</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Now Context module knows everything it needs to know about your plugin and condition, we have to tell Drupal when to evaluate your condition. You can implement whatever hook make sense for you here, the important part is that you execute your plugin. Since our condition only makes sense after everything else has fired (ie when the OG context is well and firmly set), we&rsquo;ll implement <em>hook_context_page_reaction()</em>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>ccc.module </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="k">Implements</span> <span class="nx">hook_context_page_reaction</span><span class="p">()</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span>
</span><span class='line'> <span class="o">*</span> <span class="nx">Executes</span> <span class="nx">our</span> <span class="nx">OG</span> <span class="nx">Special</span> <span class="nx">Node</span> <span class="nx">Context</span> <span class="nx">Condition</span><span class="o">.</span>
</span><span class='line'> <span class="o">*</span> <span class="nx">Gotta</span> <span class="nx">run</span> <span class="nx">on</span> <span class="nx">context_page_reaction</span><span class="p">,</span> <span class="nx">so</span> <span class="nx">Views</span> <span class="k">and</span> <span class="nx">OG</span> <span class="nx">have</span> <span class="nx">a</span> <span class="nx">chance</span> <span class="nx">to</span>
</span><span class='line'> <span class="o">*</span> <span class="nx">set</span><span class="o">/</span><span class="nx">modify</span> <span class="nx">Group</span> <span class="nx">context</span><span class="o">.</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">function</span> <span class="nf">ccc_context_page_reaction</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$group</span> <span class="o">=</span> <span class="nx">og_context</span><span class="p">();</span>
</span><span class='line'>  <span class="c1">// Only execute the group node context condition if there is a group node</span>
</span><span class='line'>  <span class="c1">// in context.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$group</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$plugin</span> <span class="o">=</span> <span class="nx">context_get_plugin</span><span class="p">(</span><span class="s1">&#39;condition&#39;</span><span class="p">,</span> <span class="s1">&#39;ccc_condition_og_special_node&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$plugin</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$plugin</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">execute</span><span class="p">(</span><span class="nv">$group</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That&rsquo;s it for your module file. Just declare the plugin to Context and its UI, and find a place to actually execute the plugin. Now we&rsquo;ll write the actual handler class.</p>

<p>Create your plugin file in the place you promised Context to find it in your <em>hook_context_plugins()</em> implementation. In our case, this is plugins/context/ccc_condition_og_special_node.inc . We&rsquo;re going to extend Context&rsquo;s basic Condition Class to provide our own functionality. Here are the contents of my ccc_condition_og_special_node.inc file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span> (ccc_condition_og_special_node.inc)</span> <a href='/downloads/code/modules/ccc/plugins/context/ccc_condition_og_special_node.inc'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Expose Web Area Contact Form as a Context condition.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ccc_condition_og_special_node</span> <span class="k">extends</span> <span class="nx">context_condition</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">function</span> <span class="nf">condition_values</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;TRUE&#39;</span> <span class="o">=&gt;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Node is an OG special node&#39;</span><span class="p">),</span>
</span><span class='line'>      <span class="s1">&#39;FALSE&#39;</span> <span class="o">=&gt;</span> <span class="nx">t</span><span class="p">(</span><span class="s1">&#39;Node is not an OG special node&#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">condition_form</span><span class="p">(</span><span class="nv">$context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$form</span> <span class="o">=</span> <span class="k">parent</span><span class="o">::</span><span class="na">condition_form</span><span class="p">(</span><span class="nv">$context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;#type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;radios&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;#default_value&#39;</span><span class="p">])){</span>
</span><span class='line'>      <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;#default_value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;TRUE&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>      <span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;#default_value&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nb">current</span><span class="p">(</span><span class="nv">$form</span><span class="p">[</span><span class="s1">&#39;#default_value&#39;</span><span class="p">]);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$form</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Condition form submit handler.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * Storing values in an array since that&#39;s what Context prefers</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">function</span> <span class="nf">condition_form_submit</span><span class="p">(</span><span class="nv">$values</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">array_filter</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="nv">$values</span> <span class="o">=&gt;</span> <span class="nv">$values</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">function</span> <span class="nf">execute</span><span class="p">(</span><span class="nv">$group</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$group</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$group</span><span class="p">[</span><span class="s1">&#39;group_type&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;node&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$group_node</span> <span class="o">=</span> <span class="nx">entity_load_single</span><span class="p">(</span><span class="nv">$group</span><span class="p">[</span><span class="s1">&#39;group_type&#39;</span><span class="p">],</span> <span class="nv">$group</span><span class="p">[</span><span class="s1">&#39;gid&#39;</span><span class="p">]);</span>
</span><span class='line'>      <span class="nv">$group_wrapper</span> <span class="o">=</span> <span class="nx">entity_metadata_wrapper</span><span class="p">(</span><span class="s1">&#39;node&#39;</span><span class="p">,</span> <span class="nv">$group_node</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$special_nid</span> <span class="o">=</span> <span class="nv">$group_wrapper</span><span class="o">-&gt;</span><span class="na">field_special_node</span><span class="o">-&gt;</span><span class="na">value</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">get_contexts</span><span class="p">()</span> <span class="k">as</span> <span class="nv">$context</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$values</span><span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">fetch_from_context</span><span class="p">(</span><span class="nv">$context</span><span class="p">,</span> <span class="s1">&#39;values&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">arg</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="s1">&#39;node&#39;</span> <span class="o">&amp;&amp;</span> <span class="nx">arg</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="nv">$contact_nid</span><span class="o">-&gt;</span><span class="na">nid</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$values</span><span class="p">[</span><span class="s1">&#39;TRUE&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// This is a special node, and the condition is set to match special </span>
</span><span class='line'>          <span class="c1">// nodes.</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">condition_met</span><span class="p">(</span><span class="nv">$context</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">arg</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="nv">$contact_nid</span><span class="o">-&gt;</span><span class="na">nid</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$values</span><span class="p">[</span><span class="s1">&#39;FALSE&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// This is not a special node, and the condition is set to match</span>
</span><span class='line'>          <span class="c1">// non-special nodes.</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">condition_met</span><span class="p">(</span><span class="nv">$context</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The trickiest part of this is in the Condition settings form and values. Context assumes that your settings form will be a series of checkboxes, and does a lot of internal processing based on that assumption. We don&rsquo;t want to mess any of that up, so there&rsquo;s a bit of dancing around the requirement here.</p>

<p>First we provide the function condition_values. Context needs to know in advance what the possible values are for the Condition&rsquo;s settings form, and this is where you return them. Based on this return, Context will build a settings form of checkboxes for you.</p>

<p>Then we override the settings form with condition_form(). I change the type of the form element to radio boxes, and set a default value.</p>

<p>Then I add my own submit handler, which merely takes the result of the radio box and puts it into an array, just like it would be if this was a checkbox.</p>

<p>Finally, we get to the good part: the execute function. If you recall, this is what we called in <em>ccc_content_page_reaction()</em>. Here we load the Group node, and use <em>entity_metadata_wrapper</em> to extract the value of the field_special_node entityreference field on that node. Then we test the current NID from the URL. Note that you never have to explicitly return FALSE; Context is only watching for TRUE returns.</p>

<p>When I learned how to do this, I found it surprisingly easy. The hardest part is wrestling with the Condition class to get exactly the behavior you like. Everyone ends up doing <em>some</em> dancing around here, so don&rsquo;t feel bad about it. Context&rsquo;s own Conditions are great examples. Have a look at the classes provided in context/plugins/context_condition_*.inc to get ideas for how to do this.</p>
]]></content>
  </entry>
  
</feed>
