<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Displaysuite | Oh, The Huge Manatee]]></title>
  <link href="http://ohthehugemanatee.org/blog/categories/displaysuite/atom.xml" rel="self"/>
  <link href="http://ohthehugemanatee.org/"/>
  <updated>2019-02-11T13:53:38+01:00</updated>
  <id>http://ohthehugemanatee.org/</id>
  <author>
    <name><![CDATA[Campbell Vertesi (ohthehugemanatee)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Create a Custom Display Suite Field]]></title>
    <link href="http://ohthehugemanatee.org/blog/2014/04/02/how-to-create-a-custom-display-suite-field/"/>
    <updated>2014-04-02T17:12:13+02:00</updated>
    <id>http://ohthehugemanatee.org/blog/2014/04/02/how-to-create-a-custom-display-suite-field</id>
    <content type="html"><![CDATA[<p>A few months ago I posted about <a href="https://ohthehugemanatee.org/blog/2014/01/03/how-to-create-a-custom-panels-pane">how to create a custom Panels pane</a>, a critical reference for anyone who uses Panels layouts. The other part of the toolkit for quick and awesome layouts is the <a href="https://drupal.org/projects/ds">Display Suite</a> module. With DS you can create new &ldquo;Display modes&rdquo; for your content, to be reused around the site. For example, on one recent site I had four standard ways to display my nodes: Full, Teaser, Mini-Teaser, and Search Result. DS made this configuration a cinch.</p>

<p>But just as in Panels you sometimes need a pane that isn&rsquo;t provided out of the box, in Display Suite you sometimes want to add a field that isn&rsquo;t really a field on your content. In a recent site build, I used this capability to include information from the Organic Groups a user belongs to on his profile as it appears in search results.</p>

<p>DS offers some ability to create this kind of custom field through the UI, but I&rsquo;m talking about more complicated outcomes where you need/want to use custom code instead. This is actually even easier than custom panels panes.</p>

<p>In our example, we will display the user&rsquo;s name, but backwards. Obviously you can do much more complex things with this, but it&rsquo;s nice to have a simple example!</p>

<h1>Declare your fields</h1>

<p>First we have to tell Display Suite about our new custom field. We do this with <a href="http://drupalcontrib.org/api/drupal/contributions!ds!ds.api.php/function/hook_ds_fields_info/7">hook_ds_fields_info()</a>.</p>

<p>```php mymodule.module
&lt;?php</p>

<p>//@file: Add a custom suite to display suite for Users.</p>

<p>/<em>*
 * Implements hook_ds_fields_info().
 * Declare my custom field.
 </em>/
function mymodule_ds_fields_info($entity_type) {
  $fields = array();</p>

<p>  if ($entity_type == &lsquo;user&rsquo;) {</p>

<pre><code>$fields['backwards_username'] = array(
  'title' =&gt; t('Backwards Username'),
  'field_type' =&gt; DS_FIELD_TYPE_FUNCTION,
  'function' =&gt; 'mymodule_backwards_username',
);
</code></pre>

<p>  return array($entity_type => $fields);
  }
  return;
}
<code>
Any guesses whathappens next? That's right, we have to write our render function under the name we just declared. You can put anything here, really anything renderable at all.
</code> php mymodule.module
/<em>*
 * Render function for the Backwards Username field.
 </em>/
function mymodule_backwards_username($field) {
  if (isset($field[&lsquo;entity&rsquo;]&ndash;>name)) {</p>

<pre><code>return check_plain(strrev($field['entity']-&gt;name));
</code></pre>

<p>  }
}
```
That&rsquo;s it. So simple, you&rsquo;ll wonder why you ever did it any other way!</p>
]]></content>
  </entry>
  
</feed>
