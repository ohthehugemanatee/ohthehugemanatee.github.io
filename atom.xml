<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Oh The Huge Manatee]]></title>
  <link href="http://ohthehugemanatee.github.io/atom.xml" rel="self"/>
  <link href="http://ohthehugemanatee.github.io/"/>
  <updated>2017-07-21T14:18:18+02:00</updated>
  <id>http://ohthehugemanatee.github.io/</id>
  <author>
    <name><![CDATA[Campbell Vertesi (ohthehugemanatee)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[That Time I Resurrected My Linux MacBook Pro]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2017/06/17/that-time-i-resurrected-my-linux-macbook-pro/"/>
    <updated>2017-06-17T23:06:02+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2017/06/17/that-time-i-resurrected-my-linux-macbook-pro</id>
    <content type="html"><![CDATA[<p>In the airport last week, my laptop stopped booting.</p>

<p>I have a 2012 Macbook Pro &ndash; yes, that coveted &ldquo;last good model&rdquo; &ndash; and it runs Ubuntu Linux. It&rsquo;s my roving office as I travel the world to conferences, performances, and job sites. So when I started it up at JFK airport this week and got a gray screen of death, I was a little concerned.</p>

<p>I tried starting into Startup Manager by holding the &ldquo;Option&rdquo; key. No bootable options appeared. Just an unhopeful file folder with a question mark. This was Not A Good Sign.</p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/folder-questionmark.jpg" title="When this is all your computer does, it is Not A Good Sign." ></p>

<p>Generally this icon means that EFI couldn&rsquo;t find a valid startup device. This is not the first time I&rsquo;ve seen this &ndash; I&rsquo;ve played with my boot options enough to mess this up for myself a few times! I breathed a heavy sigh and tried starting onto the recovery partition by holding &ldquo;Command+R&rdquo;. I hadn&rsquo;t done anything in particular with Grub recently, but I had done some kernel updates, and you never know&hellip; But the recovery boot just got me a circle with a line through it, the universal &ldquo;no&rdquo; sign. This was an even worse sign.</p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/mac-no-sign.png" title="This is an Even Worse Sign." ></p>

<p>This immediately threw the issue out of the realm of &ldquo;something I messed up myself&rdquo;, and into the less-entertaining realm of &ldquo;hardware failure.&rdquo;</p>

<p>At home I have some tools for diagnosing this sort of issue, but in the airport I had limited options &ndash; and unlimited time. So I started into Apple&rsquo;s built in Diagnostic Test mode by holding &ldquo;D&rdquo;. A lesser-known feature of the Apple boot manager, is that if it doesn&rsquo;t have a device to boot from, it can download an image from the Internet, load it into RAM, and boot from there. I had never had the chance to try it out before, but that didn&rsquo;t give much satisfaction as I grimly waited for it to work it&rsquo;s magic.</p>

<p>The diagnostic report looked fine, everything in tip-top shape! That is, until I went to the hard drive diagnostic page &ndash; there wasn&rsquo;t one. Not just no hard drive diagnostic, but completely no page for SATA diagnostics at all.</p>

<p>At this point it was clear that a catastrophic hard disk failure was my best-case scenario. Maybe it just skipped the drive diagnostic because no devices reported back, I hoped. There&rsquo;s something zen in that moment, when you find yourself <em>hoping</em> that you&rsquo;ve <em>only</em> lost your entire hard drive. All my work is backed up and relatively accessible, after all; I could stare digital death in the eye with only a hundred-Euro bill for a new drive. A motherboard failure, though &ndash; I tried not to think of it.</p>

<p>When I got home, I pulled out my toolkit. I opened up my mac to look for signs of burnout or other damage. Nothing. No smell, no scorches, no scratches. Not even any capacitor whine. I have a lot of respect for the engineers who designed a system that, even after 5 years of hard abuse, still retained it&rsquo;s &ldquo;new motherboard smell.&rdquo; I optimistically tried re-seating the SATA cable for my drive, but wasn&rsquo;t surprised when that didn&rsquo;t work.</p>

<p>I opened my desktop gaming computer, and plugged my laptop hard disk in there. I got the worst result possible from this test: the drive worked fine. It booted into my beautifully customized Linux desktop, dutifully selecting a random background image from the Internet &ndash; as luck would have it, a man screaming at his laptop in frustration. Though everyone knows that the silicon gods have a strong sense of irony.</p>

<p>I did a couple of follow up tests to confirm the diagnosis, but it was clear: the hard drive was fine, it was the SATA controller on my Macbook that had died. Everything else seemed intact; I could boot from a USB stick just fine, with a reasonable performance degradation (there&rsquo;s a ~33% speed difference between SATA3 and USB3 interfaces). But it couldn&rsquo;t detect anything connected internally.</p>

<p>The first goal was to get myself a computer for work. I&rsquo;m a contractor, which means that I don&rsquo;t take days off if I can help it. So I threw together a nice looking machine from spare parts I had laying around the house, and used my ex-laptop hard drive as a primary. When it first booted, I confess to a very satisfying &ldquo;I told you those parts would come in handy someday&rdquo; jab to my wife. She was very impressed, I could tell from the way she rolled her eyes at me. :)</p>

<p>My immediate need of a working machine for the office satisfied, the second priority was to buy a new laptop. I&rsquo;m on the road <strong>a lot</strong>. A desktop working environment &ndash; even one that lets me cheerfully tease my partner a little &ndash; is a band-aid at best. In fact, my next onsite was in Zürich in two weeks! I briefly considered taking my tower carry-on, before buckling down to find a computer.</p>

<p>My local electronics shop was a bust. They had plenty of beautiful looking machines that would run Linux perfectly nicely &ndash; those Lenovos are really coming along! &ndash; but they all had one fatal flaw: I can&rsquo;t work on a German keyboard.</p>

<p>I&rsquo;ve lived in Germany for 6 years now; I&rsquo;m comfortable in the language and culture, and I can complain about the bureaucracy with the best of them. But I just can&rsquo;t handle their terrible keyboard layout. QWERTZ might be fine for writing the language, but code and the *nix terminal are very QWERTY-centric. No, there was no way I would put up with a QWERTZ laptop for my next 5 years.</p>

<p>So I bought one of the popular Dell XPS 13 &ldquo;developer edition&rdquo; laptops, with Ubuntu pre-installed. I excitedly checked my order status right away, and saw the shipping date&hellip; was the day after I leave for Zürich. Shit.</p>

<p>So my old laptop is back in service, limping along for one last hurrah. The black box on the back looks like some impressive hardware hack, but it&rsquo;s just the old internal drive connected by USB.</p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/me-and-my-busted-laptop.jpg" title="It's only a flesh wound!" ></p>

<p>Yes, I had to do the GRUB dance pretty extensively to get it booting. boot-repair is a wonderful tool, but nothing seems to handle elegantly switching between BIOS and EFI boot modes. I ended up having to copy EFI files from my USB stick by hand. As every Linux desktop user ever has said: &ldquo;if it&rsquo;s working I won&rsquo;t ask any questions.&rdquo;</p>

<p>Yes, I will take this computer into a board room in two weeks.</p>

<p>No, I am not ashamed. I&rsquo;m actually pretty satisfied with myself. It&rsquo;s been years since I&rsquo;ve built a computer myself, let alone rigged one up with duct tape and spare parts. It&rsquo;s been ages since I&rsquo;ve had to dig around in the Linux boot process (greatly improved since 2005, Linus be praised). And it&rsquo;s been a long time since I&rsquo;ve sported duct tape on my computer.</p>

<p>In a couple weeks I&rsquo;ll find out just how much special sauce Dell has put into their default Ubuntu setup to make it run. My setup is&hellip; not very default.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Better PHP === Better Drupalists: The PHP Track at Drupalcon Vienna]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2017/06/15/better-php-better-drupalists/"/>
    <updated>2017-06-15T17:19:24+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2017/06/15/better-php-better-drupalists</id>
    <content type="html"><![CDATA[<p>One of the best parts of Drupal 8 is our shift to enterprise PHP coding structures. With tools like composer and Symfony&rsquo;s structures like Events and Dependency Injection, Drupalists are learning to be great PHP developers, and vice-versa. Today, the fastest route to becoming a rock star Drupalist is through PHP.</p>

<p>I&rsquo;m one of the PHP track chairs for Drupalcon Vienna, and this year our focus is <em>better PHP === better Drupalists</em>. How can better PHP make your life as a Drupal developer easier?</p>

<!-- more -->


<p></p>

<p><strong>Do you like PHP 7?</strong> We want to hear about the technicalities of types, throwing all the things, and your favorite operators (mine is null coalesce, but full respect for you spaceship operator fans).</p>

<p><strong>Have you seen the light of functional programming?</strong> Tell us why we should love higher orders with lambda functions and closures. Let&rsquo;s hear the finer points of first class functions.</p>

<p><strong>Do your tests bring all the bugs to the yard?</strong> We want to talk about it. Every method is a promise, and your tests make sure you keep your promises. We want sessions about test driven development in a drupal context, choosing the right test framework and scope, and how your real-world tests are saving you real-world time.</p>

<p><strong>Have you written a composer library wrapper module yet?</strong> Submit a session about how composer is saving you lines of code.</p>

<p><strong>Is your development environment fine-tuned for drupal excellence?</strong> Tell us how, and why.</p>

<p>We have only two weeks left until session submissions close! <a href="https://events.drupal.org/node/add/session?og_group_ref=14447">Get your session in now</a> and help us make Drupal code something to be proud of.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Waiting for Feeds Module: How to Import RSS in Drupal 8]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2017/06/07/stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8/"/>
    <updated>2017-06-07T06:33:24+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2017/06/07/stop-waiting-for-feeds-module-how-to-import-remote-feeds-in-drupal-8</id>
    <content type="html"><![CDATA[<p>How do you import an RSS feed into entities with Drupal 8? In Drupal 6 and 7, you probably used the <a href="https://drupal.org/project/feeds">Feeds</a> module. Feeds 7 made it easy (-ish) to click together a configuration that matches an RSS (or any XML, or CSV, or OPML, etc) source to a Drupal entity type, maps source data into Drupal fields, and runs an import with the site Cron. Where has that functionality gone in D8? I recently had to build a podcast mirror for a client that needed this functionality, and I was surprised at what I found.</p>

<p><strong>Feeds module</strong> doesn&rsquo;t have a stable release candidate, and it doesn&rsquo;t look like one is coming any time soon. They&rsquo;re still surveying people about what feeds module should even DO in D8. As the module page explains:</p>

<blockquote><p>It&#8217;s not ready yet, but we are brainstorming about what would be the best way forward. Want to help us? Fill in our survey.<br/>If you decide to use it, don&#8217;t be mad if we break it later.</p></blockquote>


<p></p>

<p>This does not inspire confidence.</p>

<p>The next great candidate is <a href="https://www.drupal.org/docs/8/core/modules/aggregator/overview">Aggregator</a> module (in core). Unfortunately, Aggregator gives you no control over the kind of entity to create, let alone any kind of field mapping. It imports content into its own Aggregated Content entity, with everything in one field, and linking offsite. I suppose you could extend it to choose you own entity type, map fields etc, but that seems like a lot of work for such a simple feature.</p>

<p>Frustrating, right?</p>

<p><strong>What if I told you that Drupal 8 can do everything Feeds 7 can?</strong></p>

<p>What if I told you that it&rsquo;s even better: instead of clicking through endless menus and configuration links, waiting for things to load, missing problems, and banging your head against the mouse, you can set this up with one simple piece of text. You can copy and paste it directly from this blog post into Drupal&rsquo;s admin interface.</p>

<h2>What? How?</h2>

<p>Drupal 8 can do all the Feedsy stuff you like with <a href="https://www.drupal.org/docs/8/api/migrate-api/migrate-api-overview">Migrate</a> module. Migrate in D8 core already contains all the elements you need to build a regular importer of ANYTHING into D8. Add a couple of contrib modules to provide specific plugins for XML sources and convenience drush functions, and <em>baby you&rsquo;ve got a stew goin&#8217;!</em></p>

<p>Here&rsquo;s the short version Howto:</p>

<p><strong>1) Download and enable <a href="https://drupal.org/project/migrate_plus">migrate_plus</a> and <a href="https://drupal.org/project/migrate_tools">migrate_tools</a> modules.</strong> You should be doing this with composer, but I won&rsquo;t judge. Just get them into your codebase and enable them. Migrate Plus provides plugins for core Migrate, so you can parse remote XML, JSON, CSV, or even arbitrary spreadsheet data. Migrate Tools gives us drush commands for running migrations.</p>

<p><strong>2) Write your Migration configuration in text</strong>, and paste it into the configuration import admin page (<code>admin/config/development/configuration/single/import</code>), or import it another way. I&rsquo;ve included a starter YAML just below, you should be able to copypasta, change a few values, and be done in time for tea.</p>

<p><strong>3) Add a line to your system cron</strong> to run <code>drush migrate -y my_rss_importer</code> at whatever interval you like.</p>

<p>That&rsquo;s it. One YAML file, most of which is copypasta. One cronjob. All done!</p>

<p>Here&rsquo;s my RSS importer config for your copy and pasting pleasure. If you&rsquo;re already comfortable with migration YAMLs and XPaths, just add the names of your RSS fields as selectors in the source section, map them to drupal fields in the process section, and you&rsquo;re all done!</p>

<p>If you aren&rsquo;t familiar with this stuff yet, don&rsquo;t worry! We&rsquo;ll dissect this together, below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_rss_importer</span>
</span><span class='line'><span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="s">&#39;Import</span><span class="nv"> </span><span class="s">my</span><span class="nv"> </span><span class="s">RSS</span><span class="nv"> </span><span class="s">feed&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">url</span>
</span><span class='line'>  <span class="l-Scalar-Plain">data_fetcher_plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>  <span class="l-Scalar-Plain">urls</span><span class="p-Indicator">:</span> <span class="s">&#39;https://example.com/feed.rss&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">data_parser_plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">simple_xml</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">item_selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/rss/channel/item</span>
</span><span class='line'>  <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">guid</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">GUID</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">guid</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">title</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Title</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">title</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pub_date</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="s">&#39;Publication</span><span class="nv"> </span><span class="s">date&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pubDate</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="s">&#39;Origin</span><span class="nv"> </span><span class="s">link&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">summary</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Summary</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="s">&#39;itunes:summary&#39;</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">image</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Image</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="s">&#39;itunes:image[</span><span class="se">&#39;&#39;</span><span class="s">href</span><span class="se">&#39;&#39;</span><span class="s">]&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">ids</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">guid</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">string</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="s">&#39;entity:node&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">process</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">title</span>
</span><span class='line'>  <span class="l-Scalar-Plain">field_remote_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link</span>
</span><span class='line'>  <span class="l-Scalar-Plain">body</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">summary</span>
</span><span class='line'>  <span class="l-Scalar-Plain">created</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">format_date</span>
</span><span class='line'>    <span class="l-Scalar-Plain">from_format</span><span class="p-Indicator">:</span> <span class="s">&#39;D,</span><span class="nv"> </span><span class="s">d</span><span class="nv"> </span><span class="s">M</span><span class="nv"> </span><span class="s">Y</span><span class="nv"> </span><span class="s">H:i:s</span><span class="nv"> </span><span class="s">O&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">to_format</span><span class="p-Indicator">:</span> <span class="s">&#39;U&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pub_date</span>
</span><span class='line'>  <span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default_value</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default_value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default_value</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default_value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">podcast_episode</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some of you can just stop here. If you&rsquo;re familiar with the format and the structures involved, this example is probably all you need to set up your easy RSS importer.</p>

<p>In the interest of good examples for Migrate module though, I&rsquo;m going to continue. Read on if you want to learn more about how this config works, and how you can use Migrate to do even more amazing things&hellip;</p>

<h2>Anatomy of a migration YAML</h2>

<p>Let&rsquo;s dive into that YAML a bit. Migrate is one of the most powerful components of Drupal 8 core, and this configuration is your gateway to it.</p>

<p>That YAML looks like a lot, but it&rsquo;s really just 4 sections. They can appear in any order, but we need all 4: General information, source, destination, and data processing. This isn&rsquo;t rocket science after all! Let&rsquo;s look at these sections one at a time.</p>

<p><strong>General information</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_rss_importer</span>
</span><span class='line'><span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="s">&#39;My</span><span class="nv"> </span><span class="s">RSS</span><span class="nv"> </span><span class="s">feed</span><span class="nv"> </span><span class="s">importer&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the basic stuff about the migration configuration. At a minimum it needs a unique machine-readable ID, a human-readable label, and <code>status: true</code> so it&rsquo;s enabled. There are other keys you can include here for fun extra features, like module dependencies, groupings (so you can run several imports together!), tags, and language. These are the critical ones, though.</p>

<p><strong>Source</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">url</span>
</span><span class='line'>  <span class="l-Scalar-Plain">data_fetcher_plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">file</span>
</span><span class='line'>  <span class="l-Scalar-Plain">urls</span><span class="p-Indicator">:</span> <span class="s">&#39;https://example.com/feed.rss&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">data_parser_plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">simple_xml</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">item_selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/rss/channel/item</span>
</span><span class='line'>  <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">guid</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">GUID</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">guid</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">title</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Item Title</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">title</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pub_date</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="s">&#39;Publication</span><span class="nv"> </span><span class="s">date&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pubDate</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="s">&#39;Origin</span><span class="nv"> </span><span class="s">link&#39;</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">summary</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Summary</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="s">&#39;itunes:summary&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">ids</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">guid</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">string</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the one that intimidates most people: it&rsquo;s where you describe the RSS source. Migrate module is even more flexible than Feeds was, so there&rsquo;s a lot to specify here&hellip; but it all makes sense if you take it in small pieces.</p>

<p>First: we want to use a remote file, so we&rsquo;ll use the Url plugin (there are others, but none that we care about right now). All the rest of the settings belong to the Url plugin, even though they aren&rsquo;t indented or anything.</p>

<p>There are two possibilities for Url&rsquo;s data_fetcher setting: file and http. <code>file</code> is for anything you could pass to PHP&rsquo;s <a href="https://secure.php.net/manual/en/function.file-get-contents.php">file_get_contents</a>, including remote URLs. There are some great performance tricks in there, so it&rsquo;s a good option for most use cases. We&rsquo;ll be using <code>file</code> for our example. <code>http</code> is specifically for remote files accessed over HTTP, and lets you use the full power of the HTTP spec to get your file. Think authentication headers, cache rules, etc.</p>

<p>Next we declare which plugin will read (parse) the data from that remote URL. We can read JSON, SOAP, arbitrary XML&hellip; in our use case this is an RSS feed, so we&rsquo;ll use one of the XML plugins. SimpleXML is just what it sounds like: a simple way to get data out of XML. In extreme use cases you might use XML instead, but I haven&rsquo;t encountered that yet (ever, anywhere, in any of my projects). TL;DR: SimpleXML is great. Use it.</p>

<p>Third, we have to tell the source where it can find the actual items to import. XML is freeform, so there&rsquo;s no way for Migrate to know where the future &ldquo;nodes&rdquo; are in the document. So you have to give it the XPath to the items. RSS feeds have a standardized path: <code>/rss/channel/item</code>.</p>

<p>Next we have to identify the &ldquo;fields&rdquo; in the source. You see, migrate module is built around the idea that you&rsquo;ll map source fields to destination fields. That&rsquo;s core to how it thinks about the whole process. Since XML (and by extension RSS) is an unstructured format &ndash; it doesn&rsquo;t think of itself as having &ldquo;fields&rdquo; at all. So we&rsquo;ll have to give our source plugin XPaths for the data we want out of the feed, assigning each path to a virtual &ldquo;field&rdquo;. These &ldquo;fake fields&rdquo; let Migrate treat this source just like any other.</p>

<p>If you haven&rsquo;t worked with XPaths before, the example YAML in this post gives you most of what you need to know. It&rsquo;s just a simple text system for specifying a tag within an unstructured XML document. Not too complicated when you get into it. You may want to <a href="https://duckduckgo.com/?q=xpath+basics">find a good tutorial</a> to learn some of the tricks.</p>

<p>Let&rsquo;s look at one of these &ldquo;fake fields&rdquo;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">summary</span>
</span><span class='line'>  <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Summary</span>
</span><span class='line'>  <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="s">&#39;itunes:summary&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>name</em> is how we&rsquo;ll address this field in the rest of the migration. It&rsquo;s the source &ldquo;field name&rdquo;. <em>label</em> is the human readable name for the field. <em>selector</em> is the XPath inside the item. Most items are flat &ndash; certainly in RSS &ndash; so it&rsquo;s basically just the tag that surrounds the data you want. There, was that so hard?</p>

<p>As a side note, you can see that my RSS feeds tend to be for iTunes. Sometimes the world eats an apple, sometimes an apple eats the world. Buy me a beer at Drupalcon and we can argue about standards.</p>

<p>Fifth and finally, we identify which &ldquo;field&rdquo; in the source contains a unique identifier. Migrate module keeps track of the association between the source and destination objects, so it can handle updates, rollbacks, and more. The example YAML relies on the very common (but technically optional) <code>&lt;guid&gt;</code> tag as a unique identifier.</p>

<p><strong>Destination</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="s">&#39;entity:node&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yep, it&rsquo;s that simple. This is where you declare what Drupal entity type will receive the data. Actually, you could write any sort of destination plugin for this &ndash; if you want Drupal to migrate data into some crazy exotic system, you can do it! But in 99.9% of cases you&rsquo;re migrating into Drupal entities, so you&rsquo;ll want <code>entity:something</code> here. Don&rsquo;t worry about bundles (content types) here; that&rsquo;s something we take care of in field mapping.</p>

<p><strong>Process</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">process</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">title</span>
</span><span class='line'>  <span class="l-Scalar-Plain">field_remote_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">link</span>
</span><span class='line'>  <span class="l-Scalar-Plain">body</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">summary</span>
</span><span class='line'>  <span class="l-Scalar-Plain">created</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">format_date</span>
</span><span class='line'>    <span class="l-Scalar-Plain">from_format</span><span class="p-Indicator">:</span> <span class="s">&#39;D,</span><span class="nv"> </span><span class="s">d</span><span class="nv"> </span><span class="s">M</span><span class="nv"> </span><span class="s">Y</span><span class="nv"> </span><span class="s">H:i:s</span><span class="nv"> </span><span class="s">O&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">to_format</span><span class="p-Indicator">:</span> <span class="s">&#39;U&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pub_date</span>
</span><span class='line'>  <span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default_value</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default_value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">1</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default_value</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default_value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">podcast_episode</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is where the action happens: the process section describes how destination fields should get their data from the source. It&rsquo;s the &ldquo;field mapping&rdquo;, and more. Each key is a destination field, each value describes where the data comes from.</p>

<p>If you don&rsquo;t want to migrate the whole field exactly as it&rsquo;s presented in the source, you can put individual fields through <a href="https://www.drupal.org/docs/8/api/migrate-api/migrate-process-plugins">Migrate plugins</a>. These plugins apply all sorts of changes to the source content, to get it into the shape Drupal needs for a field value. If you want to take a substring from the source, explode it into an array, extract one array value and make sure it&rsquo;s a valid Drupal machine name, you can do that here. I won&rsquo;t do it in my example because that sort of thing isn&rsquo;t common for RSS feeds, but it&rsquo;s definitely possible.</p>

<p>The examples of plugins that you see here are simple ones. <code>status</code> and <code>type</code> show you how to set a fixed field value. There are other ways, but the <code>default_value</code> plugin is the best way to keep your sanity.</p>

<p>The <code>created</code> field is a bit more interesting. The Drupal field is a unix timestamp of the time a node was authored. The source RSS uses a string time format, though. We&rsquo;ll use the <code>format_date</code> plugin to convert between the two. Neat, eh?</p>

<p>Don&rsquo;t forget to map values into Drupal&rsquo;s <code>status</code> and <code>type</code> fields! <code>type</code> is especially important: that&rsquo;s what determines the content type, and nodes can&rsquo;t be saved without it!</p>

<h2>That&rsquo;s it?</h2>

<p>Yes, that&rsquo;s it. You now have a migrator that pulls from any kind of remote source, and creates Drupal entities out of the items it finds. Your system cron entry makes sure this runs on a regular schedule, rather than overloading Drupal&rsquo;s cron.</p>

<p>More importantly, if you&rsquo;re this comfortable with Migrate module, you&rsquo;ve just gained a <em>lot</em> of new power. This is a framework for getting data from anywhere, to anywhere, with a lot of convenience functionality in between.</p>

<p>Happy feeding!</p>

<h2>Tips and tricks</h2>

<p>OK I lied, there is way more to say about Migrate. It&rsquo;s a wonderful, extensible framework, and that means there are lots of options for you. Here are some of the obstacles and solutions I&rsquo;ve found helpful.</p>

<p><strong>Importing files</strong></p>

<p>Did you notice that I didn&rsquo;t map the images into Drupal fields in my example? That&rsquo;s because it&rsquo;s a bit confusing. We actually have an image URL that we need to download, then we have to create a file entity based on the downloaded file, and then we add the File ID to the node&rsquo;s field as a value. That&rsquo;s more complicated than I wanted to get into in the general example.</p>

<p>To do this, we have to create a pipeline of plugins that will operate in sequence, to create the value we want to stick in our field_image.  It looks something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">field_image</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">download</span>
</span><span class='line'>      <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">constants/destination_uri</span>
</span><span class='line'>      <span class="l-Scalar-Plain">rename</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity_generate</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at that download plugin, <em>image</em> seems clear. That&rsquo;s the source URL we got out of the RSS feed. But what is <em>constants/destination_uri</em>, I hear you cry? I&rsquo;m glad you asked. It&rsquo;s a constant, which I added in the source section and didn&rsquo;t tell you about. You can add any arbitrary keys to the source section, and they&rsquo;ll be available like this in processing. It is good practice to lump all your constants together into one key, to keep the namespace clean. This is what it looks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">... usual source stuff here ...</span>
</span><span class='line'>  <span class="l-Scalar-Plain">constants</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">destination_uri</span><span class="p-Indicator">:</span> <span class="s">&#39;public://my_rss_feed/post.jpg&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Before you ask, yes this is exactly the same as using the <code>default_value</code> plugin. Still, <code>default_value</code> is preferred for readability wherever possible. In this case it isn&rsquo;t really possible.</p>

<p>Also, note that the download plugin lets me set <code>rename: true</code>. This means that in case of a name conflict, a <em>0, </em>1, <em>2, </em>3 etc will be added to the end of the filename.</p>

<p>You can see the whole structure here, of one plugin passing its result to the next. You can chain unlimited plugins together this way&hellip;</p>

<p><strong>Multiple interrelated migrations</strong></p>

<p>One of the coolest tricks that Migrate can do is to manage interdependencies between migrations. Maybe you don&rsquo;t want those images just as File entities, you actually want them in Paragraphs, which should appear in the imported node. Easy-peasy.</p>

<p>First, you have to create a second migration for the Paragraph. Technically you should have a separate Migration YAML for each destination entity type. (yes, <code>entity_generate</code> is a dirty way to get around it, use it sparingly). So we create our second migration just for the paragraph, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_rss_images_importer</span>
</span><span class='line'><span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="s">&#39;Import</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">images</span><span class="nv"> </span><span class="s">from</span><span class="nv"> </span><span class="s">my</span><span class="nv"> </span><span class="s">RSS</span><span class="nv"> </span><span class="s">feed&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">status</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">url</span>
</span><span class='line'>  <span class="l-Scalar-Plain">data_fetcher_plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http</span>
</span><span class='line'>  <span class="l-Scalar-Plain">urls</span><span class="p-Indicator">:</span> <span class="s">&#39;https://example.com/feed.rss&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">data_parser_plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">simple_xml</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">item_selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/rss/channel/item</span>
</span><span class='line'>  <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">guid</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">GUID</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">guid</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">image</span>
</span><span class='line'>      <span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Image</span>
</span><span class='line'>      <span class="l-Scalar-Plain">selector</span><span class="p-Indicator">:</span> <span class="s">&#39;itunes:image[</span><span class="se">&#39;&#39;</span><span class="s">href</span><span class="se">&#39;&#39;</span><span class="s">]&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="l-Scalar-Plain">ids</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">guid</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">string</span>
</span><span class='line'>  <span class="l-Scalar-Plain">constants</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">destination_uri</span><span class="p-Indicator">:</span> <span class="s">&#39;public://my_rss_feed/post.jpg&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="s">&#39;entity:paragraph&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">process</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">type</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default_value</span>
</span><span class='line'>    <span class="l-Scalar-Plain">default_value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">podcast_image</span>
</span><span class='line'>  <span class="l-Scalar-Plain">field_image</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">download</span>
</span><span class='line'>      <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">image</span>
</span><span class='line'>        <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">constants/destination_uri</span>
</span><span class='line'>      <span class="l-Scalar-Plain">rename</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity_generate</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you look at that closely, you&rsquo;ll see it&rsquo;s a simpler version of the node migration we did at first. I did the copy pasting myself! Here are the differences:</p>

<ul>
<li>Different ID and label (duh)</li>
<li>We only care about two &ldquo;fields&rdquo; on the source: GUID and the image URL.</li>
<li>The destination is a paragraph instead of a node.</li>
<li>We&rsquo;re doing the image trick I just mentioned.</li>
</ul>


<p>Now, in the node migration, we can add our paragraphs field to the &ldquo;process&rdquo; section like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">field_paragraphs</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">migration_lookup</span>
</span><span class='line'>    <span class="l-Scalar-Plain">migration</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">my_rss_images_importer</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">guid</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re using the <code>migration_lookup</code> plugin. This plugin takes the value of the field given in <code>source</code>, and looks it up in <code>my_rss_images_importer</code> to see if anything with that source ID was migrated. Remember where we configured the source plugin to know that <code>guid</code> was the unique identifier for each item in this feed? That comes in handy here.</p>

<p>So we pass the guid to <code>migration_lookup</code>, and it returns the id of the paragraph which was created for that guid. It finds out what Drupal entity ID corresponds to that source ID, and returns the Drupal entity ID to use as a field value. You can use this trick to associate content migrated from separate feeds, totally separate data sources, or whatever.</p>

<p>You should also add a dependency on <code>my_rss_images_importer</code> at the bottom of your YAML file, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">migration_dependencies</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">required</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">my_rss_images_importer</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will ensure that <code>my_rss_images_importer</code> will always run before <code>my_rss_importer</code>.</p>

<p>(NB: in Drupal &lt; 8.3, this plugin is called <code>migration</code>)</p>

<p><strong>Formatting dates</strong></p>

<p>Very often you will receive dates in a format other than what Drupal wants to accept as a valid field value. In this case the <code>format_date</code> process plugin comes in very handy, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>  <span class="l-Scalar-Plain">field_published_date</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">format_date</span>
</span><span class='line'>    <span class="l-Scalar-Plain">from_format</span><span class="p-Indicator">:</span> <span class="s">&#39;D,</span><span class="nv"> </span><span class="s">d</span><span class="nv"> </span><span class="s">M</span><span class="nv"> </span><span class="s">Y</span><span class="nv"> </span><span class="s">H:i:s</span><span class="nv"> </span><span class="s">O&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">to_format</span><span class="p-Indicator">:</span> <span class="s">&#39;Y-m-d\TH:i:s&#39;</span>
</span><span class='line'>    <span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">pub_date</span>
</span></code></pre></td></tr></table></div></figure>


<p>This one is pretty self-explanatory: from format, to format, and source. This is important when migrating from Drupal 6, whose date fields store dates differently from 8. It&rsquo;s also sometimes handy for RSS feeds. :)</p>

<p><strong>Drush commands</strong></p>

<p>Very important for testing, and the whole reason we have <code>migrate_plus</code> module installed! Here are some handy drush commands for interacting with your migration:</p>

<ul>
<li><code>drush ms</code>: Gives you the status of all known migrations. How many items are there to import? How many have been imported? Is the import running?</li>
<li><code>drush migrate-rollback</code>: Rolls back one or more migrations, deleting all the imported content.</li>
<li><code>drush migrate-messages</code>: Get logged messages for a particular migration.</li>
<li><code>drush mi</code>: Runs a migration. use <code>--all</code> to run them all. Don&rsquo;t worry, Migrate will sort out any dependencies you&rsquo;ve declared and run them in the right order. Also worth noting: <code>--limit=10</code> does a limited run of 10 items, and <code>--feedback=10</code> gives you an in-progress status line every 10 items (otherwise you get nothing until it&rsquo;s finished!).</li>
</ul>


<p>Okay, now that&rsquo;s really it. Happy feeding!</p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/feed-me-seymour.gif" title="&#34;Feed me, Seymour!&#34;" alt="&#34;Feed me, Seymour!&#34;"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stay for Community]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2017/03/30/stay-for-community/"/>
    <updated>2017-03-30T12:22:11+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2017/03/30/stay-for-community</id>
    <content type="html"><![CDATA[<p>The <a href="https://www.garfieldtech.com/blog/tmi-outing">Crellpocalypse</a> in the Drupal world last week has shaken the entire community. This event and its handling have called our fundamental values and structures into question. We&rsquo;ve had <a href="https://www.reddit.com/r/drupal/comments/60y9mq/larry_garfield_on_harassment_in_the_drupal_project/">fights on social media</a>, calls for <a href="https://mikkel.hoegh.org/2017/03/23/vote-no-confidence-drupal-association-leadership">Dries to step down</a>, and valuable contributors <a href="https://janezurevc.name/time-take-some-time-drupal-community">stepping away from the community</a>. I have friends on every side of the situation, but all I can think is: <strong>This seems like the perfect time for a singing, dancing, spandexed pageant about the Drupal community.</strong></p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/drupalcon-la.jpg" title="Twelve years of code, and singing the Drupalcon song with Dries and Larry is still one of my favorite memories." ></p>

<p><strong>Why?</strong> For those who don&rsquo;t know, I&rsquo;m one of the authors of the <a href="https://www.youtube.com/playlist?list=PLjVW3kqu-3e_Q41ETbML6RfbRssEdVvC4">DrupalCon Prenote</a>, the &ldquo;pre-keynote&rdquo; show that kicks off DrupalCon right before Dries&#8217; keynote. The organizer (and my officemate), Jeffrey A. &ldquo;jam&rdquo; McGuire and I have been living our own special version of the crisis (<strong>Read Jam&rsquo;s post about taking sides on this <a href="https://medium.com/@horncologne/drupal-im-taking-sides-f46194122a05">here</a></strong>). Our friend Larry Garfield has been an enthusiastic part of the Prenote ever since his first appearance as &ldquo;Lord Over-Engineering&rdquo; <a href="https://www.youtube.com/watch?v=i5bW41KYUE0&amp;list=PLjVW3kqu-3e_Q41ETbML6RfbRssEdVvC4&amp;index=20">at Drupalcon Austin</a>. Dries has often played a special guest role, too. With Drupalcon Baltimore looming on the horizon, everything seems to be coming together in one awful moment full of painful reminders &ndash; and it&rsquo;s just when we&rsquo;re supposed to be cheering for &ldquo;community.&rdquo; That awful conjunction is what makes this next Prenote in Baltimore more important than ever.</p>

<p>I have a tremendous respect for how painful this whole situation is for everyone involved. This very public meltdown, which has already done tremendous material damage, is made even more painful by the personal friendships of the key people involved. Klaus, Dries, and Larry have been colleagues for more than a decade. Even if this was only a private falling out, it would have been a painful one. And this is a public explosion. I can&rsquo;t imagine the emotional strain that each of them is under right now. Internet mob outrage is a terrible experience, made much worse when it comes from your friends and colleagues, directed at your friends and colleagues.</p>

<p><strong>And this is exactly why we need a Prenote right now.</strong> Because this is terrible shit that we&rsquo;re wading through, and the Prenote exists to remind us of why we should keep going. The Drupal community &ndash; not the specific leadership, but the agglomeration of people, practices, code, and rules &ndash; has a lot that&rsquo;s worth fighting for. We are the largest open source software community in the world, with a uniquely personal connection to its members. An incredible diversity of contributors from every culture imaginable who, for the most part, manage to work very well together.</p>

<p><strong>The Drupal community is on the leading edge of how a community of this size and diversity can work.</strong>  No one has ever done this before. Things like our <a href="https://www.drupal.org/dcoc">Code of Conduct</a>, <a href="https://www.drupal.org/governance/community-working-group">Community Working Group</a>, and <a href="https://www.drupal.org/conflict-resolution">conflict resolution process</a>, can seem like established and unassailable systems. They aren&rsquo;t. Go read the version history of those links; we just get a group of people together at a Drupalcon or on video conference to try to figure out how to handle this stuff, and then codify it in writing. We take models from other kinds of communities and try to adapt them, we suggest crazy new ideas and directions. <strong>As a community, Drupal actively and aggressively tries to figure out how to make itself more diverse, and less conflict prone.</strong> Humanity has never done collaborative communities on this scale before, and the Drupal Community is on the bleeding edge of it all.</p>

<p>The cost of the bleeding edge is that we make mistakes. We set off conflicts, we discover new kinds of obstacles. We muddle through every time, and then in retrospect try to find a better way forward for next time. I don&rsquo;t mean to diminish the size or importance of any of these conflicts. They can be serious, existential crises.</p>

<ul>
<li><a href="http://buytaert.net/acquia-my-drupal-startup">When Acquia first formed</a> and started to hold outsize influence, it was an existential crisis. We had to figure out how to handle a conflict of interest in our leadership, and what to do about a (then) totally asymmetrical services market. Acquia is now just one large player of several in the Drupal marketplace, and Dries found a compromise between his interests that has lasted almost a decade.</li>
<li>When <a href="http://www.jenlampton.com/blog/introducing-backdrop-cms-drupal-fork">Nate and Jen forked Drupal</a> into <a href="https://backdropcms.org/">Backdrop CMS</a>, it presented another existential crisis for our community. We had never had such a credible fork from such key community members before. It was the apex of a crisis in the development direction for the whole project. We had to figure out how to address developer experience, how to work with a forked project, and even how to continue working with the forkers themselves. Backdrop is now a normal part of the ecosystem; Jenn and Nate remain important and welcomed Drupal community leaders almost four years later.</li>
<li>We have had critical tensions, messy relationships, and fallings out with some of our most appreciated developers and community leaders. Whether it&rsquo;s offense taken at <a href="https://web-beta.archive.org/web/20151105173458/http://morten.dk/blog/language-twitter-misunderstanding-drupal-community">Morten</a>, or outbursts from <a href="https://www.reddit.com/r/drupal/comments/5e8dcd/a_fundamental_cultural_shift_in_drupal_or_my/">Chx</a>, these have divided our community and forced us to solve diversity problems that no one else has ever had to deal with.</li>
</ul>


<p>I could go on. The point is: With each crucible, we the Drupal community must try to learn and build better systems for the next time.</p>

<p>So right now, in the midst of all this anger, this prejudice, and these accusations, I&rsquo;m here to say: <strong>we will learn from this, too.</strong> The Drupal community is extraordinary, but we must adapt in order to survive. Losing Larry is a big hit to our community in almost every dimension. This public explosion has been a big hit to us in almost every other dimension. The arguments and animosities we&rsquo;ve unleashed feel like they will tear us apart. But we must look forward. We must use this event for introspection and carry on as a better, improved community.</p>

<p><em>Do you think Larry was punished for thoughtcrime?</em> Pitch in and help build a system where the next Larry can&rsquo;t be treated that way. <em>Do you think Dries and the DA deserve our trust in their decision?</em> Join up and help make sure the next iteration preserves the strength of independent leadership.</p>

<p>The prenote is about why we are here, why we&rsquo;ve stayed here all these years. Because it&rsquo;s fun, because it&rsquo;s supportive, because we love it. Sometimes the best way to start addressing your pain is through humor &ndash; and we desperately need to start addressing this.</p>

<p>However you feel about the Crellpocalypse, please don&rsquo;t leave. Not yet. Stay, and help the community improve. Don&rsquo;t stay for your job. Don&rsquo;t stay for Dries, or the DA, or Larry. Stay for the community.</p>

<p><strong><a href="https://events.drupal.org/baltimore2017/balti-more-prenote-balti-most-fun-drupalcon">I&rsquo;ll see you at the Prenote.</a></strong></p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/DrupalConAsia-2.jpg" title="The Prenote: The most fun you can have at Drupalcon." ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Crell Doesn't Want You to Know: How to Automate Letsencrypt on platform.sh]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2017/02/21/what-crell-doesnt-want-you-to-know-how-to-automate-letsencrypt-on-platform-dot-sh/"/>
    <updated>2017-02-21T22:33:08+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2017/02/21/what-crell-doesnt-want-you-to-know-how-to-automate-letsencrypt-on-platform-dot-sh</id>
    <content type="html"><![CDATA[<p>If you believe the <a href="https://docs.platform.sh/development/going-live.html#prerequisites">docs</a> and the <a href="https://twitter.com/damz/status/672559665377501184">twitters</a>, there is no way to automate <a href="https://letsencrypt.org/">letsencrypt</a> certificates updates on <a href="https://platform.sh/">platform.sh</a>. You have to create the certificates manually, upload them manually, and maintain them manually.</p>

<p>But as readers of this blog know, the docs are only the start of the story. I&rsquo;ve really enjoyed working with platform.sh with one of my private clients, and I couldn&rsquo;t believe that with all the flexibility &ndash; all the POWER &ndash; letsencrypt was really out of reach. I found a few attempts to script it, and one really great <a href="https://gitlab.com/snippets/27467">snippet on gitlab</a>. But no one had ever really synthesized this stuff into an easy howto. So here we go.</p>

<h3>1) Add some writeable directories where platform.sh CLI and letsencrypt need them.</h3>

<p>Normally when Platform deploys your application, it puts it all in a read-only filesystem. We&rsquo;re going to mount some special directories read-write so all the letsencrypt/platform magic can work.</p>

<p>Edit your application&rsquo;s <code>.platform.app.yaml</code> file, and find the <code>mounts:</code> section. At the bottom, add these three lines. Make sure to match the indents with everything else under the <code>mounts:</code> section!</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"/web/.well-known": "shared:files/.well-known"
</span><span class='line'>"/keys": "shared:files/keys"
</span><span class='line'>"/.platformsh": "shared:files/.platformsh"</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s walk through each of these:</p>

<ul>
<li>/web/.well-known: In order to confirm that you actually control example.com, letsencrypt drops a file somewhere on your website, and then tries to fetch it. This directory is where it&rsquo;s going to do the drop and fetch. My webroot is <code>web</code>, you should change this to match your own environment. You might use <code>public</code> or <code>www</code> or something.</li>
<li>/keys: You have to store your keyfiles SOMEWHERE. This is that place.</li>
<li>/.platformsh: Your master environment needs a bit of configuration to be able to login to platform and update the certs on your account. This is where that will go.</li>
</ul>


<h3>2) Expose the .well-known directory to the Internet</h3>

<p>I mentioned above that letsencrypt test your control over a domain by creating a file which it tries to fetch over the Internet. We already created the writeable directory where the scripts can drop the file, but platform.sh (wisely) defaults to hide your directories from the Internet. We&rsquo;re going to add some configuration to the &ldquo;web&rdquo; app section to expose this .well-known directory. Find the <code>web:</code> section of your <code>.platform.app.yaml</code> file, and the <code>locations:</code> section under that. At the bottom of that section, add this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  '/.well-known':
</span><span class='line'>        # Allow access to all files in the public files directory.
</span><span class='line'>        allow: true
</span><span class='line'>        expires: 5m
</span><span class='line'>        passthru: false
</span><span class='line'>        root: 'web/.well-known'
</span><span class='line'>        # Do not execute PHP scripts.
</span><span class='line'>        scripts: false</span></code></pre></td></tr></table></div></figure>


<p>Make sure you match the indents of the other location entries! In my (default) <code>.platform.app.yaml</code> file, I have 8 spaces before that <code>'/.well-known':</code> line. Also note that the <code>root:</code> parameter there also uses my webroot directory, so adjust that to fit your environment.</p>

<h3>3) Download the binaries you need during the application &ldquo;build&rdquo; phase</h3>

<p>In order to do this, we&rsquo;re going to need to have the platform.sh CLI tool, and a let&rsquo;s encrypt CLI tool called lego. We&rsquo;ll download them during the &ldquo;build&rdquo; phase of your application. Still in the <code>platform.app.yaml</code> file, find the <code>hooks:</code> section, and the <code>build:</code> section under that. Add these steps to the bottom of the build:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  cd ~
</span><span class='line'>  curl -sL https://github.com/xenolf/lego/releases/download/v0.3.1/lego_linux_amd64.tar.xz | tar -C .global/bin -xJ --strip-components=1 lego/lego
</span><span class='line'>  curl -sfSL -o .global/bin/platform.phar https://github.com/platformsh/platformsh-cli/releases/download/v3.12.1/platform.phar</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re just downloading reasonably recent releases of our two tools. If anyone has a better way to get the latest release of either tool, please let me know. Otherwise we&rsquo;re stuck keeping this up to date manually.</p>

<h3>4) Configure the platform.sh CLI</h3>

<p>In order to configure the platform.sh CLI on your server, we have to deploy the changes from steps 1-3. Go ahead and do that now. I&rsquo;ll wait.</p>

<p>Now connect to your platform environment via SSH (<code>platform ssh -e master</code> for most of us). First we&rsquo;ll add a config file for platform. Edit a file in <code>.platformsh/config.yaml</code> with the editor of choice. You don&rsquo;t have to use vi, but it will win you some points with me. Here are the contents for that file:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>updates:
</span><span class='line'>    check: false
</span><span class='line'>api:
</span><span class='line'>    token_file: token</span></code></pre></td></tr></table></div></figure>


<p>Pretty straightforward: this tells platform not to bother updating the CLI tool automatically (it can&rsquo;t &ndash; read-only filesystem, remember?). It then tells it to login using an API token, which it can find in the file <code>.platformsh/token</code>. Let&rsquo;s create that file next.</p>

<p>Log into the platform.sh web UI (you can launch it with <code>platform web</code> if you&rsquo;re feeling sassy), and navigate to your account settings > api tokens. That&rsquo;s at <code>https://accounts.platform.sh/user/12345/api-tokens</code> (with your own user ID of course). Add an API token, and copy its value into <code>.platformsh/token</code> on the environment we&rsquo;re working on. The token should be the only contents of that file.</p>

<p>Now let&rsquo;s test it by running <code>php /app/.global/bin/platform.phar auth:info</code>. If you see your account information, congratulations! You have a working platform.sh CLI installed.</p>

<h3>5) Request your first certificate by hand</h3>

<p>Still SSH&#8217;ed into that environment, let&rsquo;s see if everything works.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>lego --email="support@example.com" --domains="www.example.com" --webroot=/app/public/ --path=/app/keys/ -a run
</span><span class='line'>csplit -f /app/keys/certificates/www.example.com.crt- /app/keys/certificates/www.example.com.crt '/-----BEGIN CERTIFICATE-----/' '{1}' -z -s
</span><span class='line'>php /app/.global/bin/platform.phar domain:update -p $PLATFORM_PROJECT --no-wait --yes --cert /app/keys/certificates/www.example.com.crt-00 --chain /app/keys/certificates/www.example.com.crt-01 --key /app/keys/certificates/www.example.com.key example.com</span></code></pre></td></tr></table></div></figure>


<p>This is three commands: register the cert with letsencrypt, then split the resulting file into it&rsquo;s components, then register those components with platform.sh. If you didn&rsquo;t get any errors, go ahead and test your site &ndash; it&rsquo;s got a certificate! (yay)</p>

<h3>6) Set up automatic renewals on cron</h3>

<p>Back to <code>.platform.app.yaml</code>, look for the <code>crons:</code> section. If you&rsquo;re running drupal, you probably have a drupal cronjob in there already. Add this one at the bottom, matching indents as always.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>letsencrypt:
</span><span class='line'>    spec: '0 0 1 * *'
</span><span class='line'>    cmd: '/bin/sh /app/scripts/letsencrypt.sh'</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s create the script. Add the file <code>scripts/letsencrypt.sh</code> to your repo, with this content:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/usr/bin/env bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Checks and updates the letsencrypt HTTPS cert.</span>
</span><span class='line'>
</span><span class='line'><span class="nb">set</span> -e
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$PLATFORM_ENVIRONMENT&quot;</span> <span class="o">=</span> <span class="s2">&quot;master-7rqtwti&quot;</span> <span class="o">]</span>
</span><span class='line'>  <span class="k">then</span>
</span><span class='line'>    <span class="c"># Renew the certificate</span>
</span><span class='line'>    lego --email<span class="o">=</span><span class="s2">&quot;example@example.org&quot;</span> --domains<span class="o">=</span><span class="s2">&quot;example.org&quot;</span> --webroot<span class="o">=</span>/app/web/ --path<span class="o">=</span>/app/keys/ -a renew
</span><span class='line'>    <span class="c"># Split the certificate from any intermediate chain</span>
</span><span class='line'>    csplit -f /app/keys/certificates/example.org.crt- /app/keys/certificates/example.org.crt <span class="s1">&#39;/-----BEGIN CERTIFICATE-----/&#39;</span> <span class="s1">&#39;{1}&#39;</span> -z -s
</span><span class='line'>    <span class="c"># Update the certificates on the domain</span>
</span><span class='line'>    php /app/.global/bin/platform.phar domain:update -p <span class="nv">$PLATFORM_PROJECT</span> --no-wait --yes --cert /app/keys/certificates/example.org.crt-00 --chain /app/keys/certificates/example.org.crt-01 --key /app/keys/certificates/example.org.key example.org
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously you should replace all those <code>example.org</code>s and email addresses with your own domain. Make the file executable with <code>chmod u+x scripts/letsencrypt.sh</code>, commit it, and push it up to your platform.sh environment.</p>

<h3>7) Send a bragging email to Crell</h3>

<p>Technically this isn&rsquo;t supposed to be possible, but YOU DID IT! Make sure to rub it in.</p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/larry-garfield.jpg" title="&#34;Larry is waiting to hear from you. (photo credit Jesus Manuel Olivas)&#34;" alt="&#34;Larry is waiting to hear from you. (photo credit Jesus Manuel Olivas)&#34;"></p>

<p>Good luck!</p>

<p>PS &ndash; I&rsquo;m just gonna link one more time to the guy whose snippet made this all possible: <a href="https://www.drupal.org/u/hanoii">Ariel Barreiro</a> did the hardest part of this. I&rsquo;m grateful that he made his notes public!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Between the Cracks of Decoupled (Drupal) Architecture]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2017/02/11/a-year-between-the-cracks-of-decoupled-drupal/"/>
    <updated>2017-02-11T11:18:44+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2017/02/11/a-year-between-the-cracks-of-decoupled-drupal</id>
    <content type="html"><![CDATA[<p>In any decoupled architecture, people tend to focus on the pieces that will fit together. But what nobody ever tells you is: <em>watch out for the cracks!</em></p>

<p>The cracks are the integration points between the different components. It&rsquo;s not GraphQL as a communication layer; it&rsquo;s that no one thinks to log GraphQL inconsistencies when they occur. It&rsquo;s not &ldquo;what&rsquo;s my development environment&rdquo;, it&rsquo;s &ldquo;how do these three development environments work on my localhost at the same time?&rdquo;. It&rsquo;s the thousand little complexities that you don&rsquo;t think about, basically because they aren&rsquo;t directly associated with a noun. We&rsquo;ve discovered &ldquo;crack&rdquo; problems like this in technical architecture and devops, communication, and even project management. They add up to a lot of unplanned time, and they have presented some serious project risks.</p>

<p>A bit more about my recent project with <a href="https://amazeelabs.com">Amazee Labs</a>. It&rsquo;s quite a cool stack: several data sources feed into <a href="https://drupal.org">Drupal 8</a>, which offers an editorial experience and <a href="https://graphql.org">GraphQL</a> endpoints. Four <a href="https://facebook.github.io/react/">React</a>/<a href="https://facebook.github.io/relay/">Relay</a> sites sit in front, consuming the data and even offering an authenticated user experience (<a href="https://auth0.com">Auth0</a>). I&rsquo;ve been working with brilliant people: <a href="https://www.drupal.org/u/fubhy">Sebastian Siemssen</a>, <a href="https://www.drupal.org/u/moshe-weitzman">Moshe Weitzman</a>, <a href="https://github.com/pmelab">Philipp Melab</a>, and others. It has taken all of us to deal with the crack complexity.</p>

<p>The first crack appeared as we were setting up environments for our development teams. How do you segment repositories? They get deployed to different servers, and run in very different environments. But they are critically connected to each other. We decided to have a separate &ldquo;back end&rdquo; repo, and separate repos for each &ldquo;front end&rdquo; site. Since Relay needs to compile the entire data schema on startup, this means that every time the back end is redeployed with a data model change, we have to automatically redeploy the front end(s). For local development, we ended up building a mock data backend in MongoDB running in Docker. Add one more technology to support to your list, with normal attendant support and maintenance issues.</p>

<p>DevOps in general is more complicated and expensive in a decoupled environment. It&rsquo;s all easy at first, but at some point you have to start connecting the front- and back-ends on peoples&#8217; local development environments. Cue obvious problems like port conflicts, but also less obvious ones. The React developers don&rsquo;t know anything about drupal, drush, or php development environments. This means your enviroment setup needs to be VERY streamlined, even idiot-proof. Your devops team has to support a much wider variety of users than normal. Two of our front-enders had setups that made spinning up the back-end take more than 30 minutes. 30 minutes! We didn&rsquo;t even know that was possible with our stack.  The project coordinater has to budget significant time for this kind of support and maintenance.</p>

<p>Some of the cracks just mean you have to code <em>very</em> carefully. At one point we discovered that certain kinds of invalid schema are perfectly tolerable to the GraphQL module. We could query everything just fine &ndash; but React couldn&rsquo;t compile the schema, and gave cryptic errors that were hard to track down. Or what about the issues where there <em>are</em> no error messages to work with? CORS problems were notoriously easy to miss, until everything broke without clear errors. Some of these are impossible to avoid. The best you can do is be thorough about your test coverage, add integration tests which consider all environments, and <em>document all the things</em>.</p>

<p>Not all the cracks are technological; some are purely communication. In order to use a shared data service, we need a shared data model and API. So how do you communicate and coordinate that between 5 teams and 5 applications? We found this bottleneck extremely difficult. At first, it simply took a long time to get API components built. We had to coordinate so many stakeholders, that the back-end data arch and GraphQL endpoints got way behind the front-end sites. At another point, one backender organically became the go-to for everything GraphQL. He was a bottleneck within weeks, and was stuck with all the information silo&#8217;ed in his head. This is still an active problem area for us. We&rsquo;re working on thorough and well-maintained documentation as a reference point, but this costs time as well.</p>

<p>Even project managers and scrum masters found new complexities. We had more than 30 people working on this project, and everyone had to be well coordinated and informed. You certainly can&rsquo;t do scrum with 30 people together &ndash; the sprint review would take days! But split it out into many smaller teams and your information and coordination problems just got much harder. Eventually we found our solution: we have 3 teams, each with their own PO, frontender(s) and backender(s), who take responsibility for whole features at a time. Each team does its own, quite vanilla, scrum process. Layered on top of this, developers are in groups which cut across the scrum teams, which have coordination meetings and maintain documentation and code standards. All the back-enders meet weekly and work with the same standards, but the tightest coordination is internal to a feature. So far this is working well, but ask me again in a few months. :)</p>

<p>Working in a fully decoupled architecture and team structure has been amazing. It really is possible, and it really does provide a lot more flexibility. But it demands a harder focus on standards, communication, coordination, and architecture. Sometimes it&rsquo;s not about the bricks; it&rsquo;s about the mortar between them. So the next time you start work on a decoupled architecture, <em>watch out for the cracks!</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Drupal 8 Code for Drupal 7]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2016/11/05/writing-drupal-8-code-for-drupal-7/"/>
    <updated>2016-11-05T12:05:50+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2016/11/05/writing-drupal-8-code-for-drupal-7</id>
    <content type="html"><![CDATA[<p>A year ago I proposed a session for <a href="https://events.drupal.org/asia2016">Drupalcon Mumbai</a> and <a href="https://events.drupal.org/neworleans2016">Drupalcon New Orleans</a>, called <a href="https://events.drupal.org/neworleans2016/sessions/best-both-worlds-writing-drupal-8-code-drupal-7-sites">&ldquo;The best of both worlds&rdquo;</a>. It promised to show attendees how to write Drupal 8 code for Drupal 7 sites. I never ended up giving the session, but this week I got an email asking for more information. So in case it ever comes up again, here&rsquo;s my own collection of resources on the subject.</p>

<p>The big improvement that&rsquo;s hard for D7 developers to get used to is injected services. The <a href="https://www.drupal.org/project/service_container">service container module</a> makes that possible in D7. The brilliant <a href="https://www.drupal.org/u/fabianx">FabianX</a> wrote it to make his life easier in writing <a href="https://www.drupal.org/project/render_cache">render cache</a>, and his is always a good example to follow! This module creates a service container for D7, which you use just like the container in D8. You can write independent, OO code that is unit testable, with service dependencies declared in a YAML file. Note that you will also need the <a href="https://www.drupal.org/project/registry_autoload">registry autoload</a> module to get PS4 namespaced autoloading!</p>

<p>I just mentioned unit testable code as a benefit of the service container. To be honest this is a little tricksy in Drupal 7. For my own custom work I tend to isolate the test environment from the rest of Drupal, so I don&rsquo;t have to deal with everything else. Again, I followed Fabian&rsquo;s example there by looking at how <a href="http://cgit.drupalcode.org/render_cache/tree/tests?h=7.x-2.x">render cache does it&rsquo;s tests</a>. If you do want better integration, there is a good lullabot post that talks about (more) proper PHPUnit integration. <a href="https://www.lullabot.com/articles/write-unit-tests-for-your-drupal-7-code-part-1">https://www.lullabot.com/articles/write-unit-tests-for-your-drupal-7-code-part-1</a> .</p>

<p>Next on my list is Composer-managed dependencies. The Acquia developer blog has a great post about <a href="https://dev.acquia.com/blog/using-composer-manager-get-island-now">using Composer Manager for this in D7</a>. This is a huge win for a lot of custom modules, and very easy.</p>

<p>Last is plugins. The rest of this list is in no particular order, but I left plugins for last because I think this isn&rsquo;t actually necessary in D7. Personally I use modules&#8217; own hooks and just autoload independent classes. You might consider using plugins instead if you&rsquo;re going to write several plugins for the same module. In any case, <a href="https://www.previousnext.com.au/blog/drupal-8-now-object-oriented-plugins-drupal-7">Lee Rowlands has the go-to blog post about this</a>.</p>

<p>All together, you can combine these approaches to write code for D7 with the biggest Dx features of D8: service injection, phpunit testing, composer libraries, and plugins. Note that each of these blog posts assumes different workarounds for all the other functionalities&hellip; but they should help you get an understanding of how to use that particular Dx improvement in 7.</p>

<p>When I wrote that session proposal, I thought of this as a good way for D7 developers to learn D8 practices gradually, one at a time. I no longer think that&rsquo;s true. Mostly, there are so few working examples of D7 code using these practices, that it&rsquo;s quite hard to get your stuff working. This is particularly hard when you&rsquo;re just learning about the concept in the first place! Personally, I could mess around with this stuff and make my life harder with it in D7. But I couldn&rsquo;t really get the best advantage out of them until I had better examples. My best learning aids were the examples in D8 core, and the code scaffolding available through Drush and Drupal console.</p>

<p>But now that I&rsquo;m comfortable with the concepts&hellip; I would absolutely use these approaches in D7 work. You know, if I&rsquo;m FORCED to work in the old system. :)</p>

<p>One last aside here: it is easy to fall into the mindset that Drupal 8 practices are better just because they&rsquo;re newer. This is simply not true. These practices are not handed down from heaven, after all! When you have the rest of the D8 architecture in place, certain kinds of code tasks are much easier. That&rsquo;s why we like developing for it so much more. But other (less common, IMO) tasks are harder. And doing any of this in D7 means you have to put the architecture in place, too. That&rsquo;s a lot of time, and it&rsquo;s only worthwhile if you&rsquo;re going to use the particular strengths of these practices.</p>

<p>So if it looks like one of these D8 practices will make your life easier for a particular task in D7, then by all means use these approaches to get there. Composer manager has a particularly low bar &ndash; it&rsquo;s so easy to use, and makes so many tasks easier, it&rsquo;s a good approach to many tasks. But if I ever catch you implementing service container to get two lines of code into a form_alter, I will come to where you work and slap your hands off the keyboard.</p>

<p>Happy coding!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Options for Replacing Your Old MacBook Pro]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2016/10/31/developer-options-for-replacing-your-old-macbook-pro/"/>
    <updated>2016-10-31T09:05:07+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2016/10/31/developer-options-for-replacing-your-old-macbook-pro</id>
    <content type="html"><![CDATA[<p>The developer world is abuzz with criticism of the new Macbook Pro. After 4 years of waiting for an update, what we got has <a href="https://medium.com/charged-tech/apple-just-told-the-world-it-has-no-idea-who-the-mac-is-for-722a2438389b#.3cl5g99bu">two less ports, slower memory and a worse GPU</a>, is <a href="https://medium.com/charged-tech/apple-just-told-the-world-it-has-no-idea-who-the-mac-is-for-722a2438389b#.3cl5g99bu">a vanity project that the core demographic of Apple’s customers probably won’t even use</a>, in the final balance: <a href="https://petersphilo.org/2016/10/29/open-letter-to-tim-cook/">merely consumer-level</a>. It&rsquo;s slammed as <a href="https://macperformanceguide.com/blog/2016/20161029_1016-Apple2016MacBookPro-compatibility.html">incompatible</a>, <a href="https://twitter.com/lapcatsoftware/status/791760906678067200">absurd</a>, and <a href="http://cdm.link/2016/10/apples-computer-vision-looks-backward-others-look-forward/">for pros&hellip; actually an insult</a>.</p>

<p>If you&rsquo;re a developer in late 2016, and are in the market for a new laptop, there are some great options out there. It&rsquo;s too bad that the latest line of Mac products don&rsquo;t make the cut. I&rsquo;ve been neck deep in this research myself, since it&rsquo;s time to retire my mid-2012 non-retina Macbook Pro anyway. I thought I&rsquo;d share.</p>

<p>I&rsquo;m looking for a new laptop. It should be portable enough to count as an &ldquo;Ultrabook&rdquo;, powerful enough to run my IDE and many virtualized environments, with enough battery life to get me through long plane or trane trips. And it should have very high build quality, both for durability and aesthetics.</p>

<h2>Operating System</h2>

<p>OSX made it&rsquo;s name on a great user experience, and that&rsquo;s still mostly true. It&rsquo;s no longer true by such a wide margin, though. Windows has made enormous strides since then &ndash; it still feels frustrating for me, but it&rsquo;s worth a try for you.</p>

<p>Most exciting for an open source guy like me, is the discovery that Linux desktops have gotten great. Gone are the days of futzing around just to get things set up in the first place. With a contemporary Ubuntu or Mint system (at least) you get a pleasant desktop experience out of the box. Give a try to Ubuntu on a live CD, and see how it feels for you. Depending on your mission critical applications, Linux might be a strong choice.</p>

<p>If you find that you <em>have</em> to be on OSX, then you&rsquo;re stuck with either Apple hardware, or a <a href="http://www.hackintosh.com/">hackintosh</a>. From personal experience, a hackintosh is a great weekend project, but takes much more work than any Linux system I&rsquo;ve used. Every update meant serious surgery. Not for the faint of heart &ndash; but if you really need OSX, this might be the best path for you!</p>

<p>Since we&rsquo;ve accepted that we&rsquo;re likely moving away from the mac platform, I&rsquo;m not going to talk much about the operating system here anymore. These systems all (apparently) have good Linux compatibility, so the choice of OS is up to you.</p>

<h2>Apple</h2>

<p>There&rsquo;s a lot (still) to like about Apple products.</p>

<ul>
<li>The OS is UNIX-enough-for-most</li>
<li>The best applications for creatives and developers always have an OSX version</li>
<li>Build quality is fantastic</li>
<li>Aesthetics are market leading (ie it&rsquo;s pretty)</li>
</ul>


<p>Unfortunately, there are down sides too:</p>

<ul>
<li>The OS is increasingly &ldquo;locked in&rdquo;. With every update, you have to boot into recovery mode to disable some &ldquo;security&rdquo; features that lock you out of your own machine.</li>
<li>For many development applications, you actually need a third party (well maintained) repo of otherwise standard applications &ndash; homebrew.</li>
<li>The cost! The new MacBook Pro is a very expensive way to buy 4 year old hardware.</li>
<li>The ecosystem is very clearly moving away from developer needs. From pushing everything to iCloud, to converging Ux with mobile, to disappointing hardware specs, there&rsquo;s no question which way Apple is headed. And it isn&rsquo;t towards better meeting your needs as a dev.</li>
</ul>


<p>With all this considered, I wouldn&rsquo;t buy a new MacBook for my work tasks. But developers should seriously consider staying with the old Macbook Pro 2012s for another couple of years. Hardware-wise it&rsquo;s still OK, it&rsquo;s just a question of how long before the OS gets too locked down for you.</p>

<p>Looks like you can get one of these babies from eBay for <a href="http://www.ebay.com/sch/i.html?_from=R40&amp;_trksid=p2050601.m570.l1313.TR12.TRC2.A0.H0.Xmacbook+pro+2012.TRS0&amp;_nkw=macbook+pro+2012&amp;_sacat=0">about $800</a>.</p>

<h2>Lenovo Thinkpad</h2>

<p>Thinkpads have been the developer workhorse for years. Durable, with well known and supported hardware, they&rsquo;re especially known for their great Linux support.</p>

<p>Personally I&rsquo;ve always found the build quality lacking in Thinkpads, but I know people who go so far as to custom build and swap out their own components for this versatile beast. Look for models with X, P, or T in the model number, for the best developer oriented models. These babies are extremely customizable &ndash; you can get top end hardware, in a well-built and light package. Note the battery life is normally (tested at) 11 hours, and a spare battery pack can bump that up past 24 hours of use. Apple hardware can&rsquo;t even touch that. The spec sheets say that Thinkpads are only fractionally thicker than a Macbook Air, and both models come in at just under 3lbs.</p>

<p>For more information, I can only recommend <a href="https://hackaday.com/2016/10/28/apple-sucks-now-heres-a-thinkpad-buyers-guide/">Hackaday&rsquo;s recent Thinkpad buyer&rsquo;s guide</a>.</p>

<h2>Dell XPS 13 Developer Edition</h2>

<p>The XPS 13 is another laptop that you see at developer conventions. The developer edition has the option to come with Ubuntu pre-installed, meaning Linux &ndash; or at least Debian &ndash; compatibility is guaranteed. My colleagues who use XPS 13s love them.</p>

<p>In most configurations you get a touch screen, and somewhere between 11 and 22 hours of battery life, depending on usage. The only complaint I&rsquo;ve heard is the positioning of the webcam. It&rsquo;s on the lower part of the screen bezel, so if you Skype a lot, everyone gets a nice view up your nose. From personal experience, my only complaint is the build quality. It still feels plastic, and just doesn&rsquo;t match up to the machined metal that I&rsquo;ve gotten used to.  Still, the XPS 13 Developer Edition is rightfully a leading laptop for serious developers.</p>

<h2>Razer Blade Stealth</h2>

<p>I never thought that Razer would end up on my short list of laptops to consider, but here we are. The <a href="http://www.razerzone.com/gaming-systems/razer-blade-stealth">New Razer Blade Stealth</a> is a powerhouse machine, in a machined metal chassis that feels every bit as sturdy as a Mac. The processor is the most powerful I&rsquo;ve seen in anything ultrabook-sized. Though Razer doesn&rsquo;t officially offer Linux as an option, users on their forums report that Ubuntu works out of the box.</p>

<p>The only real down side to this machine is the battery, which is rated for just 9 hours of use. I say &ldquo;just&rdquo; 9 hours, even though our comparison system got 5-7 hours when it was new. Still, it&rsquo;s something to consider.</p>

<h2>Conclusions for now</h2>

<p>The moment I stepped outside the Apple store, I discovered that there is still a very healthy and diverse market of options for laptop buyers. Every other laptop I considered was cheaper and more powerful than the Macbook Pro line. Every other laptop was more compatible, had more ports, and generally seemed more useful to me. If that&rsquo;s the competitive landscape into which Apple is launching their &ldquo;absurd&rdquo; efforts, they must really have abandoned the developer demographic. On the plus side, Linux support is everywhere now. It&rsquo;s possible that this move by Apple will spur a serious wave of Linux adoption among developers.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perfect Linux Mint on My Macbook Pro 9,2]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2016/10/15/perfect-linux-mint-macbook-pro-9-2/"/>
    <updated>2016-10-15T18:44:40+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2016/10/15/perfect-linux-mint-macbook-pro-9-2</id>
    <content type="html"><![CDATA[<p>A few months ago I posted about my <a href="http://ohthehugemanatee.github.io/blog/2015/10/01/how-i-got-el-capitain-working-with-my-developer-tools/">frustrations getting El Capitan working</a> with my relatively simple developer needs. At the time I complained about the direction Apple is going. One of these days, I threatened, I would jump back to Linux as a primary desktop environment.</p>

<p>This week I read about everyone&rsquo;s problems getting OSX Sierra going, and I decided it was time to take the plunge. Apple, I completely understand the direction you are going with your environment. You&rsquo;ve gotta lock down in order to make peoples&#8217; computers reliable, easy to use appliances. But I don&rsquo;t want an appliance, I want a computer. I disagree with some of your choices about the system, what software I should use, where I may install it from, and how I may use it. I&rsquo;m switching to an OS that lets me make those choices.</p>

<p>Someone recently described the choice to me as &ldquo;program, or be programmed.&rdquo; That really stuck in my mind. OSX increasingly feels like &ldquo;someone else&rsquo;s computer&rdquo; for me. Someone else is making all the choices. Well, I don&rsquo;t have to &ldquo;be programmed&rdquo; passively. I can run an environment which respects my choices about privacy, which gives me the freedom to do whatever I want with my computer. So this week I went back to Linux.</p>

<p>The last time I used Linux as a primary laptop OS was with Gentoo in 2003. OK, easy to say that this has come a LONG way since then. Still I don&rsquo;t know if I would recommend converting your existing system if you&rsquo;re a techno noob; better to buy a system with Linux pre-configured. With that said, I am damn impressed with how well <a href="http://linuxmint.com/">Linux Mint</a> runs out of the box on my Macbook Pro 9,2 (mid-2012). Setting everything up was a snap.</p>

<h2>How to Get Linux Mint 18 running perfectly on a Macbook Pro 9,2</h2>

<p>Just install it. Seriously, that&rsquo;s it. It just works.TM</p>

<p>Installation went totally smoothly for me. I am dual booting for now, but I haven&rsquo;t had to get back into OSX all week. Note that you can access all your OSX files from inside Linux, as long as you don&rsquo;t have OSX&rsquo;s &ldquo;FileVault&rdquo; disk encryption turned on. Only Macs can decrypt that. There is a similar (more compatible) full disk encryption system for Linux, but at least during the transition I advise you to disable encryption for both &ldquo;sides&rdquo; of your computer. I did have to install ReFind to keep the dual boot working.</p>

<p>Linux Mint asks you for permission to use the non-GPL drivers it needs to run your wireless card, and your CPU&rsquo;s special capabilities. It was a checkbox. Everything just worked. I really tried to find anything substantially broken out of the box, and came up empty. Touchpad, sound, webcam, suspend/resume&hellip; everything worked just fine.</p>

<h2>Applications</h2>

<p>I was pleasantly surprised to find that all of my most important applications have Linux flavors available, and they&rsquo;re easy to install. Much easier &ndash; or more standardized at least &ndash; than installation packages on OSX or Windows! Here are the big ones I use, with any relevant notes.</p>

<ul>
<li>SimpleNote</li>
<li>Firefox Developer Edition</li>
<li>PHPStorm &ndash; sadly I couldn&rsquo;t get it to keep my old licenses. I had to re-enter my license code manually.</li>
<li>Toggl</li>
<li>PrivateInternetAccess</li>
<li>Slack &ndash; this app is pretty slow, surprisingly. I may go back to the web version.</li>
<li>Zoom meetings &ndash; still just as painful on Linux</li>
<li>Skype &ndash; skype.com has a newer version of this than the apt repo. No idea what the difference is, but it&rsquo;s still a resource hog.</li>
<li>Lastpass &ndash; browser extension, but deserves a special mention. The version of the extension that&rsquo;s installed automatically (3.3.1) is SLOW and could never connect to Lastpass reliably. Did I mention it&rsquo;s SLOW? It singlehandedly destroyed my system&rsquo;s performance. Visit <a href="">the extension&rsquo;s page on addons.mozilla.org</a> and scroll down down down until you find &ldquo;developer channel&rdquo;. There you can download the current version, 4.1.29a. That&rsquo;s fast and light and current and working.</li>
<li>FileVault &ndash; I keep my most sensitive files in a filevault-encrypted image. Unfortunately, only macs can open that format. I moved everything into a Veracrypt encrypted image instead, as the best multi-platform option.</li>
<li>Docker &ndash; docker &ldquo;native&rdquo; for mac is actually running on a very slim Linux VM, so I knew it would be faster on a native Linux machine. But I was surprised that my informal benchmarks clocked it at almost 3x faster!</li>
</ul>


<p>I was worried about application coverage, but so far I haven&rsquo;t found any gaps.</p>

<h2>Tweaks</h2>

<p>I had two big tweaks: the task bar, and the touchpad. I also did one minor tweak to improve my battery life.</p>

<p>I actually like the OSX dock and task bar concept. I find the default Windows-style taskbar finicky and a painful way to describe what applications are currently running. So I added <a href="https://glx-dock.org/">Cairo Dock</a>, and configured Cinnamon&rsquo;s built in taskbars to be a bit more OSX&#8217;ish.</p>

<p>I&rsquo;m very finicky about my touchpad&rsquo;s behavior, and Linux Mint&rsquo;s control panel didn&rsquo;t expose enough of the options to me. Fortunately the Mac touchpad runs on the excellent <a href="ftp://www.x.org/pub/X11R7.5/doc/man/man4/synaptics.4.html">Synaptics driver</a>. That means you can configure every detail from the terminal with &ldquo;synclient optionname=value&rdquo; or &ldquo;synclient -l&rdquo; to list your current settings. Use that man page I linked to tell what options do what, and you can set the perfect configuration. Once you&rsquo;ve figured out what options are just right for you, put them in a file called /etc/X11/xorg.conf.d/60-synaptics.conf, like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Section "InputClass"
</span><span class='line'>  Identifier "touchpad"
</span><span class='line'>  Driver "synaptics"
</span><span class='line'>  MatchIsTouchpad "on"
</span><span class='line'>  MatchDevicePath "/dev/input/event*"
</span><span class='line'>  Option "FingerHigh" "90"
</span><span class='line'>  Option "CoastingSpeed" "7"
</span><span class='line'>  Option "CoastingFriction" "16"
</span><span class='line'>  Option "EmulateTwoFingerMinW" "2"
</span><span class='line'>  Option "RTCornerButton" "0"
</span><span class='line'>  Option "RBCornerButton" "0"
</span><span class='line'>  Option "LTCornerButton" "0"
</span><span class='line'>  Option "LBCornerButton" "0"
</span><span class='line'>  Option "PalmDetect" "on"
</span><span class='line'>EndSection</span></code></pre></td></tr></table></div></figure>


<p>You will probably have to create the xorg.conf.d subdirectory&hellip; and you&rsquo;ll have to be sudo for the whole thing.</p>

<p>Finally, I thought I&rsquo;d try to get more life out of this old battery. So I installed <a href="https://01.org/powertop">powertop</a>, and accepted all of it&rsquo;s automated recommendations. Now I get about 5 hours, which matches my experience in OSX. It is a 4 year old laptop, after all!</p>

<p>That&rsquo;s it. One file to edit from the terminal, press &ldquo;OK&rdquo; a bunch on one application, and I got (what feels to me) like a perfect setup. This is so much better than the old days of walking uphill through the snow (both ways!) to get your display working. This is a polished, pleasant to use desktop environment.</p>

<p>I&rsquo;m happy I switched.</p>

<p>Update October 17 &ndash; The hardware CPU fan governor was letting the CPU run very very hot. I finally installed <a href="https://github.com/dgraziotin/mbpfan">mbpfan</a>, and it&rsquo;s under control again. This is all just&hellip; so much more painless than I remember!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting My Notes Out of Evernote]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2016/08/13/getting-my-notes-out-of-evernote/"/>
    <updated>2016-08-13T16:44:40+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2016/08/13/getting-my-notes-out-of-evernote</id>
    <content type="html"><![CDATA[<h2>The Why</h2>

<p>I&rsquo;m an obsessive note taker. Meetings, ideas, to do lists, grocery lists&hellip; The act of writing really helps me remember, so I&rsquo;ve been writing everything down since I was a teenager.  For years I had a thousand text documents scattered around my computer. In 2008 I discovered that the act of writing isn&rsquo;t nearly as effective as the act of <em>searching</em>, so I resolved to start taking notes in a central, searchable, sync&#8217;ed system. In short, I jumped on the Evernote train.</p>

<p>Nowadays, it seems like every time I turn around, Evernote has found some more bloat to add. First it was photos and videos, then to do lists and Reminders. Then came poorly-implemented sharing, groups, chat, geo-tagging, google drive integration, and so on. I recently heard that it does Salesforce integration, too. I&rsquo;m sure that somewhere out there, there&rsquo;s a target market that wants all of this shit every time they write a shopping list, but I am not in that market. I just want to write, sync, and search text.</p>

<p>I get to digress a little here, because it&rsquo;s my blog. I like simple, reliable tools that don&rsquo;t try to think for me. I write notes in a mix of 4 languages, so spellcheck is an automatic fail. Autocorrect is even worse. Grammar checkers make it impossible to mix short form and long form notes. I don&rsquo;t even want smart quotes. I&rsquo;m a programmer. When I type something in single quotes, I want it to <em>stay</em> in single quotes. In short, if your feature starts with the word &ldquo;smart&rdquo;, it can fuck off.</p>

<p>In the last several months I&rsquo;ve noticed that I have a thousand text notes on my computer again. It&rsquo;s not hard to see why: Evernote has gotten all &ldquo;smart&rdquo;. OSX&rsquo;s Textedit application can be configured to take the kind of simple notes I like, so that&rsquo;s what I found myself using. So I resolved to find a new note taking system.</p>

<h2>The What</h2>

<p>Here were my criteria:</p>

<ul>
<li>ONLY text notes. I&rsquo;ve got other ways to handle pictures, drawings, geo-location, and to-do lists. This is just for text.</li>
<li>The ability to disable everything &ldquo;smart&rdquo; in the text editor. I don&rsquo;t even want smart URLs. Just text.</li>
<li>Automatically saves and syncs. Of the hundred or so text documents on my Desktop, 99% of them are called &ldquo;Untitled&rdquo;.</li>
<li>Searchable.</li>
<li>Accessible from my Phone and all of my computers</li>
<li>Starting a new note should be as easy as Ctrl+N</li>
<li>Easy to sync/share with my wife</li>
<li>Ability to write to a note from the terminal or any other application.</li>
</ul>


<p>I considered just using vim, but my vim environment is way too feature-packed for what I want. I used vim as an IDE for a long time, remember? I have similar issues with Atom and Emacs &ndash; they just do way more than I want them to. Simple, simple, simple!</p>

<p>I chose Simplenote on the recommendation of a few like-minded people, and I love it so far. But of course, there&rsquo;s some migration to take care of!</p>

<h2>The How</h2>

<p>Out of the box, Simplenote is a great note-taking tool for my purposes. I had to disable some of the usual &ldquo;smart&rdquo; features, but it took me less than 30 seconds to find and disable them. No biggie. It was missing two key features, though: the ability to write from the terminal, and my long history of Evernote documents.</p>

<p>The solution to both involves an undocumented feature of Simplenote: Dropbox integration. Send an email to customer support and ask for them to enable it on your account. It&rsquo;s rudimentary, and as their support rep explained to me, &ldquo;this feature isn’t really something we can support, its more of a convenience thing we’ve added for you.&rdquo; I&rsquo;m cool with that.</p>

<p>Just like that, I have a note-taking system that does two-way sync to a folder of .txt files on all my devices. I can create txt files any way I like, of course: pipe data from the terminal, have PHP write debug output, or use a totally different text editor. That&rsquo;s a huge feature add! It also adds some other nice features, like now my wife can share my notes. Oh, and Spotlight will search those notes automatically, too. Sweet.</p>

<p>Importing from Evernote was a bit of a bitch. Evernote lets you export notebooks to HTML, or HTML wrapped in a custom XML format (.enex, because the world needs another file extension). Neither of those are terribly helpful. I tried a couple of options that failed out on my system:</p>

<ul>
<li><a href="https://github.com/claytron/ever2simple">Ever2simple</a>, which promises to convert .enex into a directory of Markdown text files, wouldn&rsquo;t install because libxml is a tricky beast on OSX. Then it wouldn&rsquo;t run because libxml is a tricky beast on OSX. I gave up.</li>
<li><a href="http://www.geeknote.me/">Geeknote</a>, the Evernote command line client, which promises to export to txt files. No installation instructions for non-Linux users, requires python-setuptools which is tricky to get on OSX, and wants sudo access for the installer script without explaining why. Nope.</li>
</ul>


<p>I finally stumbled on a little PHP project called <a href="https://github.com/panicsteve/enex-dump">enexdump</a>. One file, no installation, written in my most comfortable language after English. Less than 100 lines of code. Perfect! It worked like a charm.</p>

<p><code>php enex-dump.php ~/Desktop/my-notes.enex</code></p>

<p>And a couple of minutes later, I had an /output folder full of txt files.</p>

<p>So far I can only recommend this setup. Have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Amazee Labs]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2016/07/29/moving-to-amazee-labs/"/>
    <updated>2016-07-29T13:14:06+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2016/07/29/moving-to-amazee-labs</id>
    <content type="html"><![CDATA[<p>About a month and a half ago, I left my position at <a href="https://forumone.com">Forum One</a> to start work on a project with <a href="https://amazeelabs.com">Amazee Labs</a>. Yes, a month and a half is an eternity in Internet-Time, but better to blog about it late than not at all!</p>

<p>I loved my position at Forum One. I got to work with worthwhile clients like <a href="www.oxfam.org">Oxfam</a> and <a href="www.unitedway.org">United Way</a>, I got to solve interesting and tricky Drupal problems, and I got to work with some truly brilliant colleagues. I strongly recommend it as a great place to work. But it was always a challenge dealing with my visa situation (contrary to popular belief, I am Canadian &ndash; NOT American!), and despite heroic efforts we just couldn&rsquo;t find a way to make a permanent relationship work.</p>

<p>Drupal is an interesting field in which to work, and there&rsquo;s a lot of momentum for good developers. I chose to work with Amazee Labs because they are some of the best at what we do. I&rsquo;ve always been a fan of their work on a technical level, and now, getting to be a part of the team is very exciting.</p>

<p>My project with Amazee is packed with smart people and exciting technologies. I&rsquo;m working with brilliant Drupalists <a href="https://www.drupal.org/u/fubhy">Sebastian Siemssen</a> and <a href="https://www.drupal.org/u/moshe-weitzman">Moshe Weitzman</a>, which is a thrill on its own. We&rsquo;re mixing Drupal 8 with a custom data storage backend, serving data to a thousand separate <a href="https://facebook.github.io/react/">ReactJS</a> sites via <a href="http://graphql.org/">GraphQL</a>. The whole thing is developed, tested, and run in production on <a href="https://docker.com">Docker</a>. Perhaps the best part is that this team is so dedicated to Doing it Right. I&rsquo;ve worked with plenty of great development shops; none of them do Agile Right; Amazee does. I&rsquo;ve never seen anyone process-obsessed enough to reap the rewards of things like continuous integration or even thorough sprint reviews, but Amazee is managing it. All told, it&rsquo;s very exciting to work with such smart people, in such an effective environment, on such cutting edge technology. I&rsquo;ve gotten to flex muscles I didn&rsquo;t know I had, which is a great feeling. I will definitely be posting more about the technical issues I encounter along the way.</p>

<p>Of course, one of the most appealing parts of this job is the flexibility to continue pursuing my other passion in music. The Cast is getting bigger and bigger, with 30-40 shows this year. I&rsquo;m really working hard to balance these two parts of my life, and the trajectory of The Cast ensures that this balance will be a big focus for me in the next several years. I don&rsquo;t want to leave open source tech entirely; but I may scale back my conference visibility, and focus my contributions more. We&rsquo;ll see what happens. No matter what, I&rsquo;m happy to be working with a fantastic team and supportive company. On to amazeeing things together!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Git Log Magic]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2016/04/15/some-git-log-magic/"/>
    <updated>2016-04-15T13:12:41+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2016/04/15/some-git-log-magic</id>
    <content type="html"><![CDATA[<p>Today I got to generate git statistics for my team. It&rsquo;s more fun than it sounds! First of all, it&rsquo;s always entertaining to learn just how flexible git&rsquo;s reporting can get. Secondly, it&rsquo;s a chance to dive back into my old sysadmin tool kit and play with awk, sed, and friends.</p>

<p>There were a few questions I wanted to answer about one particular developer&rsquo;s input. I&rsquo;m concerned that he is working too much after hours. All night crunch sessions are for amateurs, and I&rsquo;m trying to break him of the habit. Here are my questions:</p>

<ul>
<li>What proportion of his commits were generated after hours?</li>
<li>Which tickets did he work on after hours?</li>
<li>Which after hours tickets were the biggest, generating the most commits?</li>
</ul>


<p>First I had to set some standards: &ldquo;after hours&rdquo; is defined as &ldquo;between 7pm and 7am&rdquo;; ticket ID numbers are noted in our commit log with square brackets, ie <code>[#12345]</code>.</p>

<p>We&rsquo;ll start with the total number of commits in this last release period, which we need to figure out the proportion of his commits. This is easy with <code>git shortlog</code>. Git log (and shortlog)&rsquo;s <code>--author</code> argument matches any part of the user&rsquo;s name, so it was easy enough to get Timmy&rsquo;s commits. This is would be the most intuitive git command I know of, except for the mystery <code>-s</code>: a shortlog-only argument that squashes commits down to a count.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git shortlog -s --author=Timmy --after="2016-02-12" --before="2016-04-14"
</span><span class='line'>   609  Timmy Horton</span></code></pre></td></tr></table></div></figure>


<p>(not his real name)</p>

<p>To get the rest of the information we want we have to switch to full git log, and get a custom-formatted one line representation of each commit, with the information that we want. We use <code>--format</code> to speciy our custom format. Here&rsquo;s <a href="https://www.kernel.org/pub/software/scm/git/docs/git-log.html#_pretty_formats">the complete list of format variables</a> &ndash; our use is pretty trivial.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --author=Timmy --format="%cd: %s" --after="2016-02-12" --before="2016-04-14"
</span><span class='line'>
</span><span class='line'>Thu Apr 14 00:34:58 2016 -0400: [#50559] Remove dependency on comm_group_stats.inc from foo_communities.info
</span><span class='line'>Wed Apr 13 17:13:02 2016 -0400: [#50549] Add proper EFQs to foo_global_render_homepage_block
</span><span class='line'>Wed Apr 13 17:10:41 2016 -0400: Merge branch 'stable' into 50549-homepage-counts-are-off
</span><span class='line'>Wed Apr 13 00:13:54 2016 -0400: Merge branch 'stable' into 50485-groups-communities-counts
</span><span class='line'>Wed Apr 13 00:13:01 2016 -0400: [#50481] Correct counts calculations on Communities and Groups DS field and Mini Panel Panes
</span><span class='line'>Tue Apr 12 03:59:17 2016 -0400: [#50248] Fix relative url issue on custom DS Author Field
</span><span class='line'>Tue Apr 12 03:18:49 2016 -0400: [#50248] Remove duplicate title in Pathauto alias for Event
</span><span class='line'>Tue Apr 12 03:10:53 2016 -0400: [#50248] Change Pathauto alias for Communities
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;ll filter to just the commits which happened between 7pm and 8am, with grep. You can use <code>egrep</code> to take advantage of &ldquo;extended&rdquo; regular expression matching, so I wrote a little regex that looks for the first component of the time, and checks that the second digit is in the right range.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --author=Timmy --format="%cd: %s" --after="2016-02-12" --before="2016-04-14" | egrep '((0[0-9])|(19)|(2[0-3])):\d{2}:\d{2}'
</span><span class='line'>
</span><span class='line'>Thu Apr 14 00:34:58 2016 -0400: [#50559] Remove dependency on comm_group_stats.inc from foo_communities.info
</span><span class='line'>Wed Apr 13 00:13:01 2016 -0400: [#50481] Correct counts calculations on Communities and Groups DS field and Mini Panel Panes
</span><span class='line'>Tue Apr 12 03:59:17 2016 -0400: [#50248] Fix relative url issue on custom DS Author Field
</span><span class='line'>Tue Apr 12 03:18:49 2016 -0400: [#50248] Remove duplicate title in Pathauto alias for Event
</span><span class='line'>Tue Apr 12 03:10:53 2016 -0400: [#50248] Change Pathauto alias for Communities
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ll take this regex apart for you. I know I can recognize a time as any colon-separated trio of two digit numbers. <code>\d</code> is a number, <code>{2}</code> is &ldquo;exactly two of the preceding element&rdquo;, so the pattern is <code>\d{2}:\d{2}:\d{2}</code>. We really want just the hours between 00 and 09, and between 19 and 23. Square brackets denote ranges, but regex examines one <em>character</em> at a time. It sees 01 as a zero, then a one. We have to take it apart a little more than this. The first range is <code>0[0-9]</code> &ndash; that one is easy. We separate it from its neighbor with a vertical pipe to make it an OR comparison, and surround each option in that OR in parenthesis to make sure that both digits are considered together. Since we have to think in single digits, the second time range range could be 19, or <code>2[0-3]</code>. Finally, I surround the whole OR set in parentheses because it makes it easier to read.</p>

<p>Getting a count of this list is easy: we just pipe the result to <code>wc -l</code> to get a count of lines.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --author=Timmy --format="%cd: %s" --after="2016-02-12" --before="2016-04-14" | egrep '((0[0-9])|(19)|(2[0-3])):\d{2}:\d{2}' | wc -l
</span><span class='line'>
</span><span class='line'>225</span></code></pre></td></tr></table></div></figure>


<p>Wow &ndash; more than a third of his commits happened after hours! That&rsquo;s definitely not good.</p>

<p>Let&rsquo;s find out which tickets he worked on, using our standardized notation for ticket numbers. We can exclude merge commits with git log&rsquo;s <code>--no-merges</code> argument. But what about printing just the ticket numbers? We&rsquo;ll use my favorite multitool: awk!</p>

<p>Awk breaks up input into columns, and has a whole language for doing exotic and fun things with those columns. Who needs excel, anyway? If you want to learn more about awk, check out my <a href="https://ohthehugemanatee.org/2011/04/working-with-bash-awk.html">very old post on the subject</a>. Here we&rsquo;re just going to accept awk&rsquo;s default of space-separated columns, and print off column number 7.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --no-merges --author=Timmy --format="%cd: %s" --after="2016-02-12" --before="2016-04-14" | egrep '((0[0-9])|(19)|(2[0-3])):\d{2}:\d{2}' | awk '{print $7}'
</span><span class='line'>
</span><span class='line'>[#50559]
</span><span class='line'>[#50481]
</span><span class='line'>[#50248]
</span><span class='line'>[#50248]
</span><span class='line'>[#50248]
</span><span class='line'>[#50248]
</span><span class='line'>[#50248]
</span><span class='line'>[#50248]
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Great, but there are a lot of duplicates there. I guess 50248 was a big one, for example. So we&rsquo;ll pass it through <code>uniq</code> to limit it to just unique tickets. Uniq removes duplicates, but only duplicates in a row. So most of the time &ndash; including today &ndash; we pair it with <code>sort</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --no-merges --author=Timmy --format="%cd: %s" --after="2016-02-12" --before="2016-04-14" | egrep '((0[0-9])|(19)|(2[0-3])):\d{2}:\d{2}' | awk '{print $7}' | sort | uniq
</span><span class='line'>
</span><span class='line'>[#48192]
</span><span class='line'>[#49324]
</span><span class='line'>[#49343]
</span><span class='line'>[#49464]
</span><span class='line'>[#49473]
</span><span class='line'>[#49863]
</span><span class='line'>[#50005]
</span><span class='line'>[#50033]
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Much better! Now, how many commits went into each one of those tickets? This was a new one for me: we&rsquo;ll use uniq&rsquo;s <code>-c</code> flag to tell it to produce counts. And just for readability, we&rsquo;ll sort the resulting list by the count.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$&gt; git log --no-merges --author=Timmy --format="%cd: %s" --after="2016-02-12" --before="2016-04-14" | egrep '((0[0-9])|(19)|(2[0-3])):\d{2}:\d{2}' | awk '{print $7}' | sort | uniq -c | sort
</span><span class='line'>
</span><span class='line'>   1 [#50238]
</span><span class='line'>   1 [#50251]
</span><span class='line'>   1 [#50252]
</span><span class='line'>   1 [#50480]
</span><span class='line'>   1 [#50481]
</span><span class='line'>   1 [#50559]
</span><span class='line'>   2 [#50418]
</span><span class='line'>   2 [50033]
</span><span class='line'>   3 [#49863]
</span><span class='line'>   3 [#50319]
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>Questions answered! Maybe next I should use gnuplot to plot the number of commits against lateness of the hour&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Open Letter to Wired Magazine]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2016/02/09/an-open-letter-to-wired-magazine/"/>
    <updated>2016-02-09T14:10:31+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2016/02/09/an-open-letter-to-wired-magazine</id>
    <content type="html"><![CDATA[<p>Dear Wired &ndash;
I read your <a href="http://www.wired.com/how-wired-is-going-to-handle-ad-blocking/">post about the changes in ad blocker policy</a> on your site. Thanks for writing in such an open and respectful tone; it&rsquo;s clear you care about your readers and want to find a reasonable way forward.</p>

<p>Unfortunately the post fails to address the REASONS that your readers use ad blockers. If only you had gone a little bit farther in the post and offered specific promises in exchange for being whitelisted, I think you would keep a much larger proportion of your readers.</p>

<p>As an example, here are some promises you could have made that would have convinced me.</p>

<ul>
<li><p>Third party scripts will be kept to under 33% of page weight. (They&rsquo;re at ~50% for this article, and that&rsquo;s with a 1.1MB gif in the content!)</p></li>
<li><p>We will respect &ldquo;do not track&rdquo; headers in your browser (or settings on your Wired account) by excluding you from ad- and analytics-related tracking, and only serving you anonymous ads.</p></li>
<li><p>We may serve ads based on your browsing behavior at wired.com, but they will always include a short explanation. For example, &ldquo;because you were interested in Article X:&rdquo;</p></li>
<li><p>Our ad placement and content will follow strict rules (link to a public page of your guidelines), similar to the Adblock &ldquo;Acceptable Ads&rdquo; criteria (<a href="https://adblockplus.org/en/acceptable-ads#criteria">https://adblockplus.org/en/acceptable-ads#criteria</a>).</p></li>
<li><p>We will serve all content and ads over HTTPS, from within the wired.com domain (or include a list of specific sources), so you can trust that it&rsquo;s really coming from us.</p></li>
</ul>


<p>I&rsquo;m not asking for those specific promises or numbers per se. They&rsquo;re only an example of how you could reassure 20% of your readers that they can trust you as a whitelisted site.</p>

<p>As it is, Wired doesn&rsquo;t offer to address any of the issues that make (technical) people enable an ad blocker. Your post is reduced to a nicely worded ultimatum. You&rsquo;re asking me to make a special exception for Wired, and offering only a stick as incentive. No carrot, no quid pro quo, and no addressing my concerns. And you&rsquo;re doing it on a 3.3MB page with 1.5MB worth of third party ads and tracking code attached, served over HTTP. As a technical reader, this FEELS to me like an ultimatum; like a belligerent challenge. Wired is close enough to the technical community to know how well we respond to ultimatums: I expect you&rsquo;re about to lose ~20% of your direct readership in a core market, and suffer a PR backlash in tech community blogs to boot.</p>

<p>I doubt this is what the Wired board had in mind.</p>

<p>Perhaps you could take a lesson from application designers. <strong>If 20% of your user base uses workarounds to get at your content while dodging parts of the user experience, that indicates great content and bad user experience.</strong> Before locking out a fifth of your readership, try a little market research to improve that Ux. Just do a cursory investigation into WHAT people find so terrible, and WHY they use the alternative; consider how you might change your Ux to make that unnecessary. After all, this is 20% of your user base who likes your core product (content) so much, they find ways to access it despite a shitty Ux. It would be a shame to lose such a dedicated (and large) group of fans.</p>

<p>It&rsquo;s possible that all of those users install ad blockers because marketing execs personally insulted them, and they won&rsquo;t have anything to do with ads in any form. But I suspect you&rsquo;d find a good percentage who use ad or script blockers for security, faster page loads, and to avoid badly behaved trackers. If you can promise even some of those benefits in exchange for whitelisting, you will get a lot more takers.</p>

<p>I will become a Wired reader again if you can promise me that your ads will be unobtrusive, exclusively from Wired, transmitted over a secure connection, and respectful of my wishes with regards to being tracked or my browsing behavior sold.</p>

<p>Until you can make that promise in clear terms, I&rsquo;ll keep my ad blocker turned on.</p>

<p>Thanks</p>

<p>Campbell Vertesi</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Drupal Should Handle Client-side Framework Obsolescence]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/12/08/how-drupal-should-handle-client-side-framework-obsolescence/"/>
    <updated>2015-12-08T12:06:02+01:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/12/08/how-drupal-should-handle-client-side-framework-obsolescence</id>
    <content type="html"><![CDATA[<p>Today I read a great blog post from Dries: <a href="http://buytaert.net/should-we-decouple-drupal-with-a-client-side-framework?utm_content=buffer17eab&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">Should we decouple Drupal with a client side framework?</a>. As usual, Dries puts a lot of thought into his writing, and braves a shitstorm of responses by laying his thinking bare while he&rsquo;s still mulling it over. I couldn&rsquo;t resist adding to the storm.</p>

<p>I completely agree that Drupal would benefit from figuring out a standardized approach to decoupled front ends. I think Dries is spot-on in supporting a &ldquo;progressive decoupling&rdquo; model as a great best-of-both-worlds response that can happen within 8.x. I would frame the problem a little differently, though.</p>

<p>The thing is, we already HAVE embraced a framework and shipped with it in core: backboneJS. And we&rsquo;re dealing with the development cycle delta already: backbone is now quite outdated; in order to keep up we have to consider ditching it in favor of options like react and angular.  <strong>I don&rsquo;t think this is a &ldquo;how do we architect a new part of Drupal&rdquo; problem, so much as a &ldquo;we already have this issue and we know it will recur&rdquo; problem</strong>. Rather than trying to decide upon a single framework that will remain relevant for the entire lifecycle of Drupal 8, the goal should be to provide a structure that makes it easy to respond once angular/react/whatever are out-of-date, too.</p>

<p>I advocate taking exactly the PHPTemplate route we took in 4.6 (was it? 4.5?): <strong>ship one engine with core, but make it replaceable</strong>. There are a few reasons behind this. First, I think Dries&#8217; rejection of this approach misses some key elements: the landscape of PHP based template engines in 2005 is very different than that of front end frameworks in 2015, and the task of replacing a Drupal 4.6 templating engine is very different from that of replacing a Drupal 8 front end framework. Second, I think we&rsquo;ve stumbled upon a reasonably successful model for adapting to development cycle deltas in how we&rsquo;ve worked with JQuery in Drupal 7. Finally, I believe that making our front end framework replaceable fits with Drupal&rsquo;s overall architectural philosophy, and will help D8 stay relevant for longer.</p>

<p>Dries is right to point out that when we did this with PHPTemplate, effectively nobody took advantage of the ability to replace it. But think back to the development landscape of PHP based templating engines in 2005, and compare it to JS frameworks in 2015: the pace of development was was much slower, every PHP project rolled their own system, libraries to extend capabilities were effectively nonexistent, the total number of developers was lower, and the amount of innovation between alternatives was lower. The arguments that make AngularJS compelling, for example (tens of thousands of developers, hundreds of tutorials, thousands of ngextensions, etc), bear little resemblance to the arguments for &ndash; what even <em>were</em> the alternatives to PHPTemplate in 2005?</p>

<p>Further, the task of replacing PHPTemplate in Drupal 4.6 is not analogous to the task of replacing a JS framework in D8. We only use backbone to handle interactions and &ldquo;big pipe&rdquo; style includes (rather than page rendering out of whole cloth). Dries proposes continuing this approach (and I agree). The task of replacing Backbone with Angular or React would be a big one, but nowhere near as big as building an entire templating engine from scratch for Drupal 4.6. It&rsquo;s still hard work of course, but you&rsquo;re not rebuilding a third of the platform, or architecting your own library with a unique approach.</p>

<p>We made PHPTemplate replaceable as a hedge against Adrian Rossouw getting hit by a bus, and because if Adrian wanted to roll his own engine, surely other developers would, too. It turns out that wasn&rsquo;t necessary; no other templating system gained enough traction to make a dent in the default. That was an effect of the development landscape and the size of the task. This is just not the case with front end frameworks.</p>

<p>In 2005, we were confident that if PHPTemplate was a great choice in 2005, it would probably still be a great choice in 2006, and with care it could remain a reasonable choice for 5 years or more. Replacability was for allowing alternatives. In the case of externally developed front end frameworks in 2015, we can say with certainty that a great choice this year will be an old choice in 2 years, a bad choice in 3, and a liability in 5. That&rsquo;s a different problem space.</p>

<p><strong>I think we have a better analogy with JQuery than with PHPTemplate</strong>. That was also an external library with a development pace delta problem. Within 3 years of including JQuery in Drupal 6 core, the JQuery Update module climbed into the list of most-used modules. For Drupal 7 we architected to make this a little easier, anticipating that it would be necessary. That&rsquo;s worked out well for us. Fortunately there aren&rsquo;t a lot of mutually exclusive alternatives to JQuery, so all we&rsquo;ve needed is updates. Still, I think there are good lessons here for introducing a standard front end framework in Drupal 8: people will need updates faster than core can provide them, and the contrib space is a reasonable place to get them &ndash; even (especially?) when the updates are so common they become de facto parts of core.</p>

<p>Finally, a key philosophy for Drupal 8 is that builders can replace or override entire subsystems. Making the front-end framework similarly replaceable fits right in line with this architecture. If I want to replace Backbone with React, I should be able to do that relatively easily. In a dream world we could abstract out the whole thing, and make core front end framework agnostic. THAT would be a monumental task, indeed!</p>

<p>I advise changing the implementation and documentation of backbone in Drupal 8.x to be (more easily) replaceable or augmentable in contrib. I&rsquo;m convinced that we would see an AngularJS contrib module within a year, and probably a ReactJS one as well. The power law predicts that the community will standardize around one framework at a time, which means that we really only have to be concerned about transition periods. Even then, front end frameworks don&rsquo;t have to be exclusive. Site builders could include the ReactJS library as a dependency of module X, the AngularJS library as a dependency of module Y, and backbone from core. The people developing sites where an extra 36kB (the size of AngularJS 1.4.8) of page size matters are also the ones best positioned to fully replace one library with another.</p>

<p><strong>TL;DR: Contrib is a great place to handle the ever-changing, rapid landscape of front end frameworks. All Drupal core has to do is make it easy.</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drupal 8 RC 1 Is Out! What Now?]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/10/08/drupal-8-rc-1-is-out-what-now/"/>
    <updated>2015-10-08T11:16:02+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/10/08/drupal-8-rc-1-is-out-what-now</id>
    <content type="html"><![CDATA[<p>Last night (my time) I got the good news over twitter:</p>

<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr">Blue smoke from the chimney, I repeat blue smoke from the chimney!&#10;&#10;<a href="https://twitter.com/hashtag/Drupal8?src=hash">#Drupal8</a> release candidate 1 has been released! Good day for <a href="https://twitter.com/hashtag/Drupal?src=hash">#Drupal</a>!</p>&mdash; Marc Drummond (@MarcDrummond) <a href="https://twitter.com/MarcDrummond/status/651870155828412416">October 7, 2015</a></blockquote>


<script async src="http://ohthehugemanatee.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>That&rsquo;s right, Drupal 8 has it&rsquo;s first release. But what does that mean? Is it done? Can I start using it yet? What kind of changes are coming? Will dawehner get to sleep, at last?</p>

<h2>Are we there yet?</h2>

<p>Despite all the rejoicing on social media, this isn&rsquo;t the final release for Drupal 8 &ndash; it&rsquo;s only the first Release Candidate. This means that we have (officially!) 0 &ldquo;critical&rdquo; bugs left to fix in Drupal 8. That means exactly what it sounds like: there are no critical, world-ending bugs left&hellip; <em>that we know of</em>. Just like any software product, we&rsquo;ll continue to discover critical issues through its entire life cycle. We&rsquo;re still finding occasional critical issues in Drupal 7 almost five years since its first release candidate; that&rsquo;s just a part of supporting a piece of software over the long term. The RC phase means that while Drupal 8 is stable enough to use, we&rsquo;re still discovering critical bugs a little too frequently to recommend it for everyone, in every use case.</p>

<p>&ldquo;A little too frequently&rdquo; means that the rate of critical bugs incoming is still too high to be able to promise the fast respond-and-fix turnaround that we want. Every two weeks we&rsquo;ll create a new Release Candidate version that fixes whatever new criticals have been discovered. Once the core team is confident that they can squash bugs in a timely enough manner, they&rsquo;ll (finally) release Drupal version 8.0.0.</p>

<h2>But when will it REALLY be released?</h2>

<p>&ldquo;When it&rsquo;s ready&rdquo; still applies! But we are very, very close now. To give you a point of reference, Drupal 7 went through four Release Candidates before release (two months). That codebase was a lot more fragile than this one, so it&rsquo;s reasonable to hope that we&rsquo;ll have a very Drupally Christmas season this year. Personally I&rsquo;m betting on January.</p>

<p><img src="https://www.drupal.org/files/christmas-ad.png"></p>

<h2>Can I use it yet?</h2>

<p><span style="font-size: 1.5em"><em>Yes!</em></span> <span style='font-size:0.5em'>Some terms and conditions apply.</span></p>

<p>Just because there are no criticals left, doesn&rsquo;t mean that D8 is completely bug-free! We have <a href="https://www.drupal.org/project/issues/search/drupal?assigned=&amp;submitted=&amp;project_issue_followers=&amp;status[]=1&amp;status[]=13&amp;status[]=8&amp;status[]=14&amp;status[]=4&amp;priorities[]=300&amp;categories[]=1&amp;version[]=8.0.x-dev&amp;issue_tags_op=%3D&amp;issue_tags=">a big pile of known &ldquo;major&rdquo; issues</a> that have been deferred until after 8.0.0, which should impact your decision. You can see at that link that some of them are already ready to be committed. The catch is that during the RC phase, we aren&rsquo;t allowed to commit these fixes. <a href="https://www.drupal.org/core/d8-allowed-changes#rc">We&rsquo;re basically only allowed to work on criticals and documentation</a>. So there are still some serious issues that might be a problem in some use cases.</p>

<p>The biggest issue (that I know of) is <a href="https://www.drupal.org/node/2542868">a potential incompatibility between Drupal 8&rsquo;s new &ldquo;cache tags&rdquo; header and some hosting providers</a>. The problem is that Drupal includes some important caching information on the &ldquo;back of the envelope&rdquo; of its response to a page request, and it&rsquo;s possible to run out of envelope! If the cache tags header gets too long for the web host to handle, it can behave unpredictably. You might get white screens of death, or it might just shorten the cache tags header, removing important information. There&rsquo;s a solution in the works to allow a maximum length setting, but it won&rsquo;t make it in until 8.0.1 (two weeks after 8.0.0). In the meantime you should avoid D8 if you have any very complex pages with many elements. The examples in that ticket are good ones: a news site with very complex layouts, or a single page site with a lot of &ldquo;stuff&rdquo; crammed onto the one, front page.</p>

<p>The other &ldquo;gotcha&rdquo; to bear in mind is that it will take some time for Drupal&rsquo;s contributed modules ecosystem to catch up with the new version. According to <a href="http://www.bluespark.com/status-top-100-contributed-modules-drupal-8">Bluespark&rsquo;s status of the top 100 modules for D8</a> page, so far only 9 of the top 100 D7 modules have a D8 release marked &ldquo;stable.&rdquo; 19 of those top 100 modules are included in D8 core however, so our total count is up to 28. This is enough to give a good foundation for relatively simple sites, especially if you have some PHP skills under your belt. But I wouldn&rsquo;t go building a complex Intranet on it just yet!</p>

<h2>Wait, so it&rsquo;s still busted?</h2>

<p>No! Drupal 8 is a solid platform for most use cases &ndash; that&rsquo;s the point of the RC release! It&rsquo;s time to go ahead and use it for site builds. Just take it easy and use it for simple sites, first. Give the rest of the community a chance to release stable modules, and hold off on that Facebook-buster behemoth website you&rsquo;ve got planned until a few months after launch.</p>

<h2>What happens after 8.0.0?</h2>

<p>After 8.0.0 is released, we will make an enormous, fundamental shift in how Drupal is developed. We will start using <a href="http://semver.org">semantic versioning</a> with a regular release schedule. Every two weeks we&rsquo;ll release a new &ldquo;patch level&#8217; release: 8.0.1, 8.0.2, and so on. Patch level releases will be bug fixes only, and will be backwards-compatible &ndash; that means they won&rsquo;t break anything on your site. Approximately every 6 months, we&rsquo;ll release a new &#8220;minor level&rdquo; release: 8.1.0, 8.2.0, etc. Minor releases are allowed to contain new features, but they are still guaranteed to be backwards-compatible. So even these releases won&rsquo;t break anything on your site. We&rsquo;re still <a href="">figuring out</a> the exact process for minor releases, but they will include similar phases to what we&rsquo;ve seen with D8 core: a beta phase, and release candidates until we&rsquo;re sure there are no more criticals.</p>

<p>What about API changes, and features that would break existing sites? We won&rsquo;t even start developing on those until well into the D8 life cycle. Those changes will belong in the 9.x branch, and will be kept completely separate from anything that could touch your site.</p>

<p>The key take-away here is that D8 updates should never break your site. They may add features, but they will not interfere with whatever you&rsquo;ve already built. We&rsquo;ll continue a regular pace of improving the product in a predictable, scheduled, and backwards-compatible way.</p>

<h2>Where are the best Drupal 8 release parties?</h2>

<p>The Drupal Association is coordinating promotion for official Drupal 8 launch parties. If you want to host one, just <a href="https://assoc.drupal.org/drupal-8-launch-party">fill out their form</a> and they&rsquo;ll help you promote it! So far no one has built a site mapping the parties, but keep an eye out in the #drupal hashtag on twitter!</p>

<h2>Who do I congratulate? Who do I thank?</h2>

<p>Drupal 8 RC 1 is the combined effort of more than 3200 contributors. That is an incredible number. By comparison, Apache, the world&rsquo;s most popular open source webserver, has 118 contributors. MySQL, the database platform which runs an enormous portion of the Internet, has 1320 contributors. So you can basically walk up to anyone at a Drupalcon and thank him or her!</p>

<p>Most of the contributors to Drupal 8 leaned on the support, training, and hand-holding of mentors at Drupal events all over the world. I know I needed a mentor for my first core contributions, and I got to turn around and mentor other people myself. The mentors are the support network that made this level of mass contribution possible.</p>

<p>But the level of effort is definitely not evenly distributed. Most contributors have made fewer than 20 registered contributions. <a href="https://drupal.org/u/dawehner">But</a> <a href="https://drupal.org/u/tim.plunkett">some</a> <a href="https://drupal.org/u/berdir">people</a> <a href="https://drupal.org/u/alexpott">have</a> <a href="https://drupal.org/u/wim-leers">really</a> <a href="https://drupal.org/u/sun">gone</a> <a href="https://drupal.org/u/damiankloip">above</a> <a href="https://drupal.org/u/xjm">and</a> <a href="https://drupal.org/u/g%C3%A1bor-hojtsy">beyond</a> <a href="https://drupal.org/u/larowlan">what</a> <a href="https://drupal.org/u/chx">anyone</a> <a href="https://drupal.org/u/andypost">would</a> <a href="https://drupal.org/u/ameteescu">expect</a>. <a href="https://drupal.org/u/jhodgdon">It&rsquo;s</a> <a href="https://drupal.org/u/yched">no</a> <a href="https://drupal.org/u/joelpittet">exaggeration</a> <a href="https://drupal.org/u/effulgentsia">to</a> <a href="https://drupal.org/u/yesct">say</a> <a href="https://drupal.org/u/swentel">that</a> <a href="https://drupal.org/u/cottser">these</a> <a href="https://drupal.org/u/nod_">people</a> <a href="https://drupal.org/u/vijaycs85">have</a> <a href="https://drupal.org/u/pwolanin">shaped</a> <a href="https://drupal.org/u/aspilicious">the</a> <a href="https://drupal.org/u/tstoeckler">future</a> <a href="https://drupal.org/u/xano">of</a> <a href="https://drupal.org/u/plach">the</a> <a href="https://drupal.org/u/lewisnyman">Internet</a>.</p>

<p>It is easy to concentrate on the number of contributions as the only metric of involvement in the release of D8. But some of the biggest influences on Drupal 8 have been community leaders, whose effort is not counted in commits under their own names. The initiative leads who architected and directed all this contribution: <a href="https://drupal.org/u/heyrocker">heyrocker</a>, <a href="https://drupal.org/u/Senpai">Senpai</a>, <a href="https://drupal.org/u/jlambert">jlambert</a>, <a href="https://drupal.org/u/Crell">Crell</a>, <a href="https://drupal.org/u/dmitrig01">dmitrig01</a>, <a href="https://drupal.org/u/g%C3%A1bor-hojtsy">Gábor Hojtsy</a>, <a href="https://drupal.org/u/jose-reyero">Jose Reyero</a>, <a href="https://drupal.org/u/mitchell">mitchell</a>, <a href="https://drupal.org/u/jenlampton">jenlampton</a>, <a href="https://drupal.org/u/bleen18">bleen18</a>, <a href="https://drupal.org/u/jackalope">jackalope</a>, <a href="https://drupal.org/u/ericduran">ericduran</a>, <a href="https://drupal.org/u/jhood">jhood</a>, <a href="https://drupal.org/u/jacine">jacine</a>, <a href="https://drupal.org/u/shyamala">shyamala</a>, <a href="https://drupal.org/u/rupl">rupl</a>, <a href="https://drupal.org/u/johnalbin">JohnAlbin</a>, <a href="https://drupal.org/u/twom">twom</a>, and <a href="https://drupal.org/u/sofiya">sofiya</a>. Without them, we would have had nothing to commit!</p>

<p>Listing all of those names brings to mind the platform that they all use to contribute and coordinate: <a href="https://drupal.org">drupal.org</a>, maintained by the <a href="https://assoc.drupal.org/">Drupal Association</a>. It also brings to mind the events, like Drupalcon, Drupalcamps, Dev Days, which everyone attends to collaborate, teach, and learn; also maintained by the <a href="https://assoc.drupal.org/">Drupal Association</a>. Not to mention the Drupal 8 Accelerate program, which raised $250,000 towards developer grants; also created and maintained by the <a href="https://assoc.drupal.org/">Drupal Association</a>. The people at the Association have worked tirelessly to support this release.</p>

<p>All of this developer time is extremely valuable, and not all of it came out of the developers&#8217; own free time. Huge swaths of Drupal 8 development have been sponsored by the companies that participate in the community. We&rsquo;ve only been tracking their contributions for a short time, but the information we have is powerful. This release would not have happened without the developer time donated by companies like <a href="https://acquia.com">Acquia</a>, <a href="http://www.md-systems.ch">MD Systems</a>, <a href="http://www.chapterthree.com">Chapter Three</a>, <a href="http://tag1consulting.com">Tag1</a>, and <a href="http://druid.fi">Druid</a>. A quick glance at <a href="https://www.drupal.org/drupal-services">Drupal.org&rsquo;s Drupal Services page</a> shows us that contribution is a normal part of the culture for the biggest Drupal companies. These were the top 5, but almost every major Drupal shop has contributed in some measure. Thank you to these companies for believing in our product and supporting it so generously.</p>

<p>Finally, the people who bear the greatest personal responsibility are definitely the core maintainers. These people don&rsquo;t just deserve your thanks; they deserve lifetime supplies of free beer sent to their homes. I can&rsquo;t offer that on a blog; all I can say is THANK YOU.</p>

<p><a href="https://drupal.org/u/effulgentsia">Alex Bronstein</a></p>

<p><a href="https://drupal.org/u/dries">Dries Buytaert</a></p>

<p><a href="https://drupal.org/u/webchick">Angie &ldquo;webchick&rdquo; Byron</a></p>

<p><a href="https://drupal.org/u/catch">Nat Catchpole</a></p>

<p><a href="https://drupal.org/u/xjm">Jess Myrbo</a></p>

<p><a href="https://drupal.org/u/alexpott">Alex Pott</a></p>

<p>To everyone who contributed, but especially the people I&rsquo;ve listed here: You&rsquo;ve made a new generation of Internet innovation possible. Thank you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El Capitain Broke My Developer Stuff! Here's How to Fix It]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/10/01/how-i-got-el-capitain-working-with-my-developer-tools/"/>
    <updated>2015-10-01T12:44:42+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/10/01/how-i-got-el-capitain-working-with-my-developer-tools</id>
    <content type="html"><![CDATA[<p>Last night I installed OSX&rsquo;s new &ldquo;El Capitain&rdquo; update, and it broke most of the tools I use in my daily life as a developer, including homebrew and git. Here are the steps I had to follow to get everything working again.</p>

<h2>1) Disable System Integrity Protection</h2>

<p><a href="https://en.wikipedia.org/wiki/System_Integrity_Protection">System Integrity Protection</a> is a new feature of OSX, also called &ldquo;rootless.&rdquo; As the nickname suggests, it creates another level of access above your root account. The nerfed root account can&rsquo;t modify anything in a (broad) list of system files, folders, or processes. This makes sense for most users, who blindly enter their sudo password for any installer that asks. It is not so good for developers, who regularly use these folders. Homebrew is one application that expects access to <em>/usr/local</em>, a protected folder. Other applications that are busted by SIP are OSXFuse, MacGPG, Git&hellip; the list goes on. So step one is to disable SIP.</p>

<ul>
<li>Reboot into recovery mode (hold Command+R on reboot)</li>
<li>Access the Terminal from the dropdown menus.</li>
<li>Run <code>csrutil disable</code></li>
<li>Reboot back into OSX</li>
</ul>


<p>Congratulations, your root account is un-nerfed. If you use OSXFuse, a VPN, or anything else that relies on unsigned KEXTs, you&rsquo;ll have to keep this disabled.</p>

<h2>2) Fix permissions on /usr/local</h2>

<p>Open the terminal and run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chflags norestricted /usr/local <span class="o">&amp;&amp;</span> sudo chown <span class="k">$(</span>whoami<span class="k">)</span>:admin /usr/local <span class="o">&amp;&amp;</span> sudo chown -R <span class="k">$(</span>whoami<span class="k">)</span>:admin /usr/local
</span></code></pre></td></tr></table></div></figure>


<p>This fixes the permissions to what homebrew and other applications expect: you own the directory and all its contents. It also changes the flags for SIP, to allow future modifications if you choose to re-enable it.</p>

<h2>3) Fix developer tools</h2>

<p>I also found that every time I tried to run&hellip;. well almost anything, I would get errors like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xcrun: error: invalid active developer path <span class="o">(</span>/Library/Developer/CommandLineTools<span class="o">)</span>, missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</span><span class='line'>xcrun: error: invalid active developer path <span class="o">(</span>/Library/Developer/CommandLineTools<span class="o">)</span>, missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</span><span class='line'>Stashing your changes:
</span><span class='line'>xcrun: error: invalid active developer path <span class="o">(</span>/Library/Developer/CommandLineTools<span class="o">)</span>, missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</span><span class='line'>xcrun: error: invalid active developer path <span class="o">(</span>/Library/Developer/CommandLineTools<span class="o">)</span>, missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
</span><span class='line'>Error: Failure <span class="k">while </span>executing: git stash save --include-untracked --quiet
</span></code></pre></td></tr></table></div></figure>


<p>To fix this, you have to re-install Xcode developer tools, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>xcode-select --install
</span></code></pre></td></tr></table></div></figure>


<p>It took 5 minutes to download and install on my system.</p>

<h2>4) Fix homebrew</h2>

<p>To make sure your homebrew install is working again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#$ brew update</span>
</span><span class='line'><span class="c">#$ brew doctor</span>
</span></code></pre></td></tr></table></div></figure>


<p>Follow any instructions the good doctor gives you! Here&rsquo;s what I did:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew link ppl011
</span><span class='line'>brew install libxml2 onigurama
</span></code></pre></td></tr></table></div></figure>


<p>Those were probably more to do with how badly I maintain my own homebrew cellar than anything else, but if the doctor gives you instructions, follow them!</p>

<p>Finally, update your brew-installed applications &ndash; many of them have updates for El Capitain.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew upgrade
</span></code></pre></td></tr></table></div></figure>


<h2>5) Fix git</h2>

<p>You&rsquo;re not using the outdated version of git that comes with Xcode developer tools(2.3.8), are you? No, you&rsquo;re using the current release (2.5.3), <a href="http://git-scm.com/download/mac">downloaded from git-scm.com</a>. Whether you had it previously installed, or just installed it now, it lives in /usr/local/git . But the system will still default to using the old Xcode version. Here&rsquo;s how to fix that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#$ git --version</span>
</span><span class='line'>git version 2.3.8 <span class="o">(</span>Apple Git-58<span class="o">)</span>
</span><span class='line'><span class="c">#$ sudo mv /usr/bin/git /usr/bin/git.xcode</span>
</span><span class='line'>Password:
</span><span class='line'><span class="c">#$ sudo ln -s /usr/local/git/bin/git /usr/bin/git</span>
</span></code></pre></td></tr></table></div></figure>


<h2>6) Re-install GPGTools</h2>

<p>The GPGTools team have done a great job of handling the known incompatibility between GPGMAil and El Capitain&rsquo;s version of the Mail application&hellip; but I still had trouble with the other parts of the suite (which I actually use). I found it easiest to just <a href="https://gpgtools.org">download and re-install</a>.</p>

<h2>7) Optional, but recommended: tell me about good Linux laptops</h2>

<p>I understand how SIP is helpful for normal consumers, but developers are not normal consumers. This step by Apple crosses my comfort barrier, so I&rsquo;m officially interested in a linux laptop for the first time in years. I have a while to decide, but if you know of a Linux laptop that can compete with my Macbook Air in terms of convenience, sexiness, and reliability, please post about it in the comments.</p>

<p>That&rsquo;s everything I had to do to get my system back in working order&hellip; for now. I&rsquo;ll update this post if I find more steps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundled TV Pricing Will Come Back From the Dead]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/07/17/meet-the-new-bundled-tv-pricing/"/>
    <updated>2015-07-17T11:27:29+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/07/17/meet-the-new-bundled-tv-pricing</id>
    <content type="html"><![CDATA[<p>Everyone is excited these days about the <a href="https://500ish.com/the-9-bullet-points-of-doom-for-espn-a692d0f48182">death of ESPN</a>, particularly as evidence of the <a href="http://www.thefiscaltimes.com/2015/03/12/Long-Slow-Death-Cable-Just-Reached-Tipping-Point">death of &ldquo;bundle priced&rdquo; Cable TV</a>. Consumers are supposed to be excited that soon they will only have to pay for the content they want. Don&rsquo;t get too excited yet.</p>

<p>Let&rsquo;s remember the basic purpose of bundled cable TV: for content producers, cable company bundles provide an easy, single outlet for their content. It&rsquo;s &ldquo;somebody else&rdquo; who will get the content to their viewers, sell advertising, and collect payment. For consumers, bundles provide a packaged set of channels that&rsquo;s easier to manage (and price) than a bunch of individual contracts.</p>

<p>Apart from whatever level of collusion exists in the TV world, the prices for bundles have reached some sort of equilibrium: basic cable TV with Internet costs about US$45, and &ldquo;channel bundles&rdquo; are $30-40 on top of that. Seems like a great savings for cord cutters, AND they only have to get the content they want, right?</p>

<p>Maybe not. A cord cutter still pays $35/mo for basic Internet. They pay $9/mo for an annual Netflix subscription, but not everything is available on Netflix. The TV and Movie industry use their copyright stranglehold to limit a lot of high demand content to Hulu, for $8/mo. And since the cord-cutter demographic is also the prime demo for Game of Thrones, there&rsquo;s HBO Now for $15/mo. Turns out that if you want to get access to the same content you got in your cable bundle, you&rsquo;re looking at $67/mo, or $71/mo if you include Amazon Prime. And what happens when ESPN opens their live streaming channel?</p>

<p>What happened to our cord-cutter savings? Suddenly it looks like you&rsquo;re paying the same amount of money, just to different people &ndash; plus, you&rsquo;re stuck with the administrative pain of keeping track of what shows are available on which service, and making sure you&rsquo;re subscribed. Of course, the number of services is still growing, so this part of the cost is only going up.</p>

<p>I have a great business idea: I&rsquo;ll handle all the subscriptions for you, and you just pay me one monthly fee. $90 per month, and you can have Internet access with Netflix, Hulu, HBO, and Amazon all together. You get the simplicity of knowing you&rsquo;re subscribed to all the most popular services, without having to track every one or handle the payments. I call it &ldquo;bundling&rdquo;. See what I did there?</p>

<p>There is a market niche for bundled services in any multi-channel environment. It sure seems like cable is dead, and bundle pricing with it. But the truth is it&rsquo;s just in transition. We&rsquo;ll still pay basically the same amount, for the same things we did before; we just get a new delivery mechanism.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How the World Sees Drupal - the Dutch PHP Conference 2015]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/06/27/dutch-php-conference-2015/"/>
    <updated>2015-06-27T12:04:52+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/06/27/dutch-php-conference-2015</id>
    <content type="html"><![CDATA[<p>One of the most exciting parts about the switch to Drupal 8 is the rapprochement of the Drupal community with the rest of PHP. This weekend I spoke at the Dutch PHP Conference in Amsterdam, where I got to be part of the vanguard of Drupalists reconnecting with the larger PHP world. The experience had a big impact on my perspective of the future of Drupal as a platform and as a community.</p>

<p>For many years Drupal was quite separate from the rest of the PHP universe. I would hear comments like: &ldquo;I don&rsquo;t know PHP. I&rsquo;m a Drupal developer.&rdquo; On the other side, our platform&rsquo;s focus on accessibility for new and learning developers meant that many mainstream PHP coders considered Drupal a repository for poor code. The more Drupal built up its&#8217; separate API and library of unique concepts like hooks and theme functions, the further we separated from everyone else in our programming language. This movement wasn&rsquo;t unique to Drupal; as a group PHP developers were building on many, very different frameworks. The PHP World conference was a segregated affair; projects like Zend, PHPBB, and Wordpress kept to themselves.</p>

<p>This changed in 2010. Facebook had invested tremendous resources into their own brand of PHP, &ldquo;HipHop&rdquo;, and in many ways sparked a wave of renewed interest in the language. The PHP community spawned the Framework Interoperability Group (FIG), an initiative dedicated to standardized practices in PHP that could bring the various frameworks together. Drupal 8 was designed to align with the FIG goals, using current practices and components like Composer, PSR-4 namespacing, and dependency injection. Large parts of Drupal&rsquo;s core functionality are provided by Symfony components; the system is now a recognizable contemporary PHP project. In the FIG era, PHP developers are rediscovering the enterprise class CMS in their midst.</p>

<p>I was surprised to learn about Drupal&rsquo;s poor reputation among the more hardcore PHP developers. Many of them had had a bad experience with Drupal 5 or 6, and never looked back. Some had tried Drupal 7, and were bewildered by the slew of Drupal-specific concepts and structures they needed to learn for even the simplest modifications. Many people I spoke with thought of Drupal as a pile of procedural code, packed with confusing work-arounds and anachronisms that made it not worth adopting. Few had heard of Drupal 8&rsquo;s move to contemporary, object-oriented coding practices. Many were dismissive of even the concept of an application framework like ours.</p>

<p>At the same time, the developers at this conference were just as fun and happy to help each other as at the best Drupal events. I learned a tremendous amount about working with Drupal&rsquo;s new object-oriented tool kit, and grew a lot as a programmer. Once I explained the differences with Drupal 8, most people were curious to see just how it worked. And just like at my favorite Drupal events, even the most well-known developers were interested to help. I complained about my frustrations with the PHPUnit testing suite, and was introduced to the original author and maintainer. I had a question about the relative performance of PHP 5.6, 7, and HHVM, and got to talk about it with the release manager for the whole PHP project. This kind of openness and interest in collaboration convinced me more than anything else, that Drupal should integrate more with the mainstream PHP.</p>

<p>Drupal 8 RC1 is just around the corner, and Drupal developers all over the world are learning the new programming concepts that have reshaped our product. It is time for us to break out of our insular community, and learn from the rest of the PHP world. They&rsquo;re friendly, they have a lot to teach us &ndash; and they can help take Drupal as a project to the next level.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting Android Error -505 From Google Play]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/05/29/troubleshooting-android-error-505-from-google-play/"/>
    <updated>2015-05-29T12:20:33+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/05/29/troubleshooting-android-error-505-from-google-play</id>
    <content type="html"><![CDATA[<p>I recently got a new Android phone, and very quickly had trouble installing some of my favorite apps. Google&rsquo;s Play Store downloads the app successfully, then presents me with &ldquo;Unknown Error -505&rdquo;.</p>

<p><img class="center" src="http://ohthehugemanatee.github.io/images/error-505.jpg" title="&#34;Error 505&#34;" alt="&#34;Error 505&#34;"></p>

<p>This error message means precisely nothing. It means &ldquo;something went wrong during installation, and we&rsquo;re not telling you what.&rdquo; This drives me crazy. This blog post is about how to get more information out of that error message, and how to fix the problem.</p>

<p>Your device is not going to give you more information on its own. Instead, you need to install ADB, the &ldquo;Android Debug Bridge&rdquo; which lets you type commands directly to your Android device over a USB connection. It&rsquo;s not hard to install, so <a href="https://duckduckgo.com/?q=how+to+install+adb">go and set that up now</a>.</p>

<p>Next, you will have to make sure your Android device permits you to use ADB. On the phone, go to Settings > About Phone, and scroll down to where you see &ldquo;Build Number&rdquo; listed. Tap on &ldquo;Build Number&rdquo; until you see a popup telling you that you are now a &ldquo;developer&rdquo;. Then go back to Settings, and tap on the new &ldquo;Developer Options&rdquo; menu item near the bottom. Enable the &ldquo;USB Debugging&rdquo; option there.</p>

<p>Now plug your phone into your computer via USB, and open up your Terminal. Windows users, use the Console &ndash; it&rsquo;s the same thing. First, we&rsquo;ll see if our Android device is even visible to ADB.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> adb devices
</span></code></pre></td></tr></table></div></figure>


<p>You should see a list of devices attached, with (probably) only one listing. If not, check to make sure that your phone is really in USB Debugging mode.</p>

<p>Now, we&rsquo;re going to try to install that same troublesome application over ADB. In order to do this, you&rsquo;ll have to download the application&rsquo;s installer (APK) file on your computer. Google makes this hard to do directly, you&rsquo;ll have to use a <a href="http://apps.evozi.com/apk-downloader/">third-party website</a> or a <a href="https://addons.mozilla.org/en-us/firefox/addon/apk-downloader/?src=search">browser extension</a> to find your download link. Download that APK file and save it somewhere safe on your computer. Remember the path to that file! I saved mine in <em>~/Downloads</em>.</p>

<p>With that APK file in hand, let&rsquo;s try installing your application over ADB. My problematic app was the Deutsche Bahn Navigator app, but obviously you should substitute the filename to your APK here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> adb install ~/Downloads/de.hafas.android.db.apk
</span><span class='line'>5051 KB/s <span class="o">(</span>5991578 bytes in 1.158s<span class="o">)</span>
</span><span class='line'>  pkg: /data/local/tmp/de.hafas.android.db.apk
</span><span class='line'>Failure <span class="o">[</span>INSTALL_FAILED_DUPLICATE_PERMISSION <span class="nv">perm</span><span class="o">=</span>de.dbnavigator.permission.list <span class="nv">pkg</span><span class="o">=</span>de.bahn.dbtickets<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>(Full disclosure: that is not the exact permission and package I had, I foolishly closed the terminal window before recording it. But the error and the format are correct, which is what&rsquo;s important here.)</p>

<p>NOW we have something to work with! We get an error message, and some information that might explain what&rsquo;s going on. In this case, the installation failed because of a duplicate permission, whatever that means. But it tells me the name of the permission, and &ndash; even better &ndash; the package that controls it. Notice that com.dbtickets is not the application I was trying to install. It&rsquo;s something else, a separate app I had, called &ldquo;DB Tickets&rdquo;. This tells me that if I uninstall that other application, it should solve this problem. You can do that from ADB as well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$&gt;</span> adb uninstall de.bahn.dbtickets
</span><span class='line'>Success
</span></code></pre></td></tr></table></div></figure>


<p>Now I can try installing the original app again, and it should work. I can do that from the Play Store application, or directly from ADB with the command we tried above. At this point, I&rsquo;m way more likely to try it through ADB just to make sure I get an error message if it breaks!</p>

<p>You can follow this process to get further information about any error -505 you may receive. You can do all sorts of things through ADB to resolve this kind of problem. Check the <a href="https://developer.android.com/tools/help/adb.html#commandsummary">complete list of commands</a> for more information.</p>

<h2>Postlude</h2>

<p>This experience pointed out two large Ux failures on the part of Google:</p>

<p>First, is one of the most frustrating Ux concepts out there, which I call: &ldquo;never present the user with useful information.&rdquo; I understand that 99% of the time, users do not want or need to see technical information about what&rsquo;s going on. Even <em>I</em> want my systems to seem like they &ldquo;just work.&rdquo; But the 1% of the time when we DO want technical information, is in our error messages. The sensible Ux policy to adopt here, is &ldquo;make every error message easy to google for more information&rdquo;.</p>

<p>Second, enabling developer mode. Here are the official instructions:</p>

<blockquote><p>&hellip;go to Settings > About phone and tap Build number seven times. Return to the previous screen to find Developer options at the bottom.</p></blockquote>

<p>&hellip; what? This is 2015. You don&rsquo;t have to hide your &ldquo;Developer mode&rdquo; behind some obscure Easter Egg behavior. I don&rsquo;t know if it&rsquo;s standard, but on my phone you&rsquo;re asked right at the start what level of settings you want to see: simple or advanced. Adding a third level for &ldquo;developer&rdquo; would make a lot more sense.</p>

<p>But hey, at least we can always get what we want from the terminal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Build a New Source for Drupal Migrate 8]]></title>
    <link href="http://ohthehugemanatee.github.io/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8/"/>
    <updated>2015-05-02T16:10:36+02:00</updated>
    <id>http://ohthehugemanatee.github.io/blog/2015/05/02/how-to-build-a-new-source-for-drupal-migrate-8</id>
    <content type="html"><![CDATA[<p>This week I wanted to accomplish a task in Drupal 8 that would be simple in Drupal 7: Import several CSV files, each one related to the others by taxonomy terms. Most importantly, I wanted to do it with <a href="https://drupal.org/project/migrate">Migrate module</a>.</p>

<p>Migrate in Drupal 7 is a fantastic piece of code. It is not designed to be used from the GUI, rather, it provides a framework of &ldquo;source&rdquo;, &ldquo;destination&rdquo;, and &ldquo;migration&rdquo; classes so that even the most convoluted migration is 90% written for you. To create a migration in Drupal 7, you create a custom module, declare your migrations in a hook_info, and then extend the built in &ldquo;migration&rdquo; class. You instantiate one of the given classes for the source material (is it a CSV? JSON? Direct connection to a custom DB?), then one of the classes for the destination (is it a content type? Taxonomy term?). Then you add one simple line of code mapping each field from source to destination. If you know what you&rsquo;re doing, the task I had in mind shouldn&rsquo;t take more than 15 minutes per source.</p>

<p>It&rsquo;s not quite so easy in Drupal 8. First of all, with Migrate in core, we had to greatly simplify the goals for the module. The version of Migrate that is really functional and stable is specifically and <em>only</em> the basic framework. There is a separate migrate_drupal module to provide everything you need for migrating from Drupal 6 or 7. This has been a laser-tight focus on just the essentials, which means there&rsquo;s no UI, very little drush support, and definitely no nice extras like the ability to read non-Drupal sources.</p>

<p>My task this week became to write the first CSV source for Drupal 8 Migrate.</p>

<h1>Drupal 8 Migrate Overview</h1>

<p>Drupal 8 Migrations, when you&rsquo;re using classes that already exist, are actually even easier than Migrate 7. All you do is write a single YAML file for each kind of data you&rsquo;re transferring, and put it in a custom module&rsquo;s <em>config/install</em> directory. Your YAML file gives your migration a name and a group, tells us what the source is for data, maps source fields to destination fields, and tells us what the destination objects are. Here&rsquo;s an example Migration definition file from core. See if you can understand what&rsquo;s being migrated here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">d6_system_site</span>
</span><span class='line'><span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Drupal 6 site configuration</span>
</span><span class='line'><span class="l-Scalar-Plain">migration_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Drupal 6</span>
</span><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">variable</span>
</span><span class='line'>  <span class="l-Scalar-Plain">variables</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">site_name</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">site_mail</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">site_slogan</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">site_frontpage</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">site_403</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">site_404</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">drupal_weight_select_max</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">admin_compact_mode</span>
</span><span class='line'><span class="l-Scalar-Plain">process</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">site_name</span>
</span><span class='line'>  <span class="l-Scalar-Plain">mail</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">site_mail</span>
</span><span class='line'>  <span class="l-Scalar-Plain">slogan</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">site_slogan</span>
</span><span class='line'>  <span class="s">&#39;page/front&#39;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">site_frontpage</span>
</span><span class='line'>  <span class="s">&#39;page/403&#39;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">site_403</span>
</span><span class='line'>  <span class="s">&#39;page/404&#39;</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">site_404</span>
</span><span class='line'>  <span class="l-Scalar-Plain">weight_select_max</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">drupal_weight_select_max</span>
</span><span class='line'>  <span class="l-Scalar-Plain">admin_compact_mode</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">admin_compact_mode</span>
</span><span class='line'><span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">config</span>
</span><span class='line'>  <span class="l-Scalar-Plain">config_name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">system.site</span>
</span></code></pre></td></tr></table></div></figure>


<p>You probably figured it out: this migration takes the system settings (variables) from a Drupal 6 site, and puts them into the Drupal 7 configuration. Not terribly hard, right? You can even do data transformations from the source field value to the destination.</p>

<p>Unfortunately, the only sources we have so far are for Drupal 6 and 7 sites, pulling directly from the database. If you want to use Migrate 8 the way we used Migrate 7, as an easy way to pull in data from arbitrary sources, you&rsquo;ll have to contribute.</p>

<h1>Writing a source plugin in Migrate_plus</h1>

<p>Enter <a href="https://www.drupal.org/sandbox/mikeryan/migrate_plus">Migrate Plus module</a>. This is the place in contrib, where we can fill out all the rest of the behavior we want from Migrate, that&rsquo;s not necessarily a core requirement. This is where we&rsquo;ll be writing our source plugin.</p>

<p>To add a source plugin, just create a .php file in migrate_plus/src/Plugins/migrate/source . Drupal will discover the new plugin automatically the next time you rebuild the cache. The filename has to be the same as the name of the class, so choose carefully! My file is called CSV.php . Here&rsquo;s the top of the file you need for a basic :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @file</span>
</span><span class='line'><span class="sd"> * Contains \Drupal\migrate_plus\Plugin\migrate\source\csv.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="k">namespace</span> <span class="nx">Drupal\migrate_plus\Plugin\migrate\source</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Drupal\migrate\Plugin\migrate\source\SourcePluginBase</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Source for CSV files.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @MigrateSource(</span>
</span><span class='line'><span class="sd"> *   id = &quot;csv&quot;</span>
</span><span class='line'><span class="sd"> * )</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">CSV</span> <span class="k">extends</span> <span class="nx">SourcePluginBase</span> <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m calling this out separately because for newbies to Drupal 8, this is the hard part. This is all the information that Drupal needs to be able to find your class when it needs it. The @file comment is important. That and the namespace below have to match the actual location of the .php file.</p>

<p>Then you declare any other classes that you need, with their full namespace. To start with all you need is SourcePluginBase.</p>

<p>Finally you have to annotate the class with that @MigrateSource(id=&ldquo;csv&rdquo;). This is how Migrate module knows that this is a MigrateSource, and the name of your Plugin. Don&rsquo;t miss it!</p>

<p>Inside the class, you must have the following methods. I&rsquo;ll explain a bit more about each afterwards.</p>

<ul>
<li>initializeIterator() : Should return a valid Iterator object.</li>
<li>getIds() : Should return an array that defines the unique identifiers of your data source.</li>
<li>__toString() : Should return a simple, string representation of the source.</li>
<li>fields() : Should return a definitive list of fields in the source.</li>
<li>__construct() : You don&rsquo;t NEED this method, but you probably will end up using it.</li>
</ul>


<h2>initializeIterator()</h2>

<p>An Iterator is a complicated sounding word for an Object that contains everything you need to read from a data source, and go through it one line at a time. Maybe you&rsquo;re used to fopen(&lsquo;path/to/file&rsquo;, &lsquo;r&rsquo;) to open a file, and then you write code for every possible operation with that file. An iterator takes care of all that for you. In the case of most file-based sources, you can just use the SplFileObject class that comes with PHP.</p>

<p>Any arguments that were passed in the source: section of the YAML file will be available under $this->configuration. So if my YAML looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">csv</span>
</span><span class='line'>  <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&#39;/vagrant/import/ACS_13_1YR_B28002_with_ann.csv&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>My initializeIterator( ) method can look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">initializeIterator</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// File handler using our custom header-rows-respecting extension of SPLFileObject.</span>
</span><span class='line'>  <span class="nv">$file</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SplFileObject</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]);</span>
</span><span class='line'>  <span class="nv">$file</span><span class="o">-&gt;</span><span class="na">setFlags</span><span class="p">(</span><span class="nx">SplFileObject</span><span class="o">::</span><span class="na">READ_CSV</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$file</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Not too complicated, right? This method is called right at the beginning of the migration, the first time Migrate wants to get any information out of your source. The iterator will be stored in $this->iterator.</p>

<h2>getIds()</h2>

<p>This method should return an array of all the unique keys for your source. A unique key is some value that&rsquo;s unique for that row in the source material. Sometimes there&rsquo;s more than one, which is why this is an array. Each key field name is also an array, with a child &ldquo;type&rdquo; declaration. This is hard to explain in English, but easy to show in code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">getIDs</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$ids</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;keys&#39;</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$key</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$ids</span><span class="p">[</span><span class="nv">$key</span><span class="p">][</span><span class="s1">&#39;type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;string&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$ids</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We rely on the YAML author to tell us the key fields in the CSV, and we just reformat them accordingly. Type can be &lsquo;string&rsquo;, &lsquo;float&rsquo;, &lsquo;integer&rsquo;, whatever makes sense.</p>

<h2>__toString()</h2>

<p>This method has to return a simple string explanation of the source query. In the case of a file-based source, it makes sense to print the path to the file, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__toString</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="nx">string</span><span class="p">)</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">query</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>fields()</h2>

<p>This method returns an array of available fields on the source. The keys should be the machine names, the values are descriptive, human-readable names. In the case of the CSV source, we look for headers at the top of the CSV file and build the array that way.</p>

<h2>__construct()</h2>

<p>The constructor method is called whenever a class is instantiated. You don&rsquo;t technically HAVE to have a constructor on your source class, but you&rsquo;ll find it helpful. For the CSV source, I used the constructor to make sure we have all the configuration that we need. Then I try and set sane values for fields, based on any header in the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="k">array</span> <span class="nv">$configuration</span><span class="p">,</span> <span class="nv">$plugin_id</span><span class="p">,</span> <span class="nv">$plugin_definition</span><span class="p">,</span> <span class="nx">MigrationInterface</span> <span class="nv">$migration</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">parent</span><span class="o">::</span><span class="na">__construct</span><span class="p">(</span><span class="nv">$configuration</span><span class="p">,</span> <span class="nv">$plugin_id</span><span class="p">,</span> <span class="nv">$plugin_definition</span><span class="p">,</span> <span class="nv">$migration</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Path is required.</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;path&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">MigrateException</span><span class="p">(</span><span class="s1">&#39;You must declare the &quot;path&quot; to the source CSV file in your source settings.&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Key field(s) are required</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;keys&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">MigrateException</span><span class="p">(</span><span class="s1">&#39;You must declare the &quot;keys&quot; the source CSV file in your source settings.&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Set header rows from the migrate configuration.</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">headerRows</span> <span class="o">=</span> <span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;header_rows&#39;</span><span class="p">])</span> <span class="o">?</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;header_rows&#39;</span><span class="p">]</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Figure out what CSV columns we have.</span>
</span><span class='line'>  <span class="c1">// One can either pass in an explicit list of column names to use, or if we have</span>
</span><span class='line'>  <span class="c1">// a header row we can use the names from that</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">headerRows</span> <span class="o">&amp;&amp;</span> <span class="k">empty</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;csvColumns&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">csvColumns</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Skip all but the last header</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">headerRows</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getNextLine</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$row</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getNextLine</span><span class="p">();</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="nv">$row</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$header</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$header</span> <span class="o">=</span> <span class="nx">trim</span><span class="p">(</span><span class="nv">$header</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getIterator</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">csvColumns</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$header</span><span class="p">,</span> <span class="nv">$header</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">elseif</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;csvColumns&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getIterator</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">csvColumns</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">configuration</span><span class="p">[</span><span class="s1">&#39;csvColumns&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Profit!</h2>

<p>That&rsquo;s it! Four simple methods, and you have a new source type for Drupal 8 Migrate. Of course, you will probably find complications that require a bit more work. For CSV, supporting a header row turned out to be a real pain. Any time Migrate tried to &ldquo;rewind&rdquo; the source back to the first line, it would try and migrate the header row! I ended up extending SplFileObject just to handle this issue.</p>

<p>Here&rsquo;s the YAML file I used to test this, importing a list of states from some US Census data.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">id</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">states</span>
</span><span class='line'><span class="l-Scalar-Plain">label</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">States</span>
</span><span class='line'><span class="l-Scalar-Plain">migration_groups</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">US Census</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">source</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">csv</span>
</span><span class='line'>  <span class="l-Scalar-Plain">path</span><span class="p-Indicator">:</span> <span class="s">&#39;/vagrant/import/ACS_13_1YR_B28002_with_ann.csv&#39;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">header_rows</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2</span>
</span><span class='line'>  <span class="l-Scalar-Plain">fields</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Id2</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Geography</span>
</span><span class='line'>  <span class="l-Scalar-Plain">keys</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">Id2</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">process</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Geography</span>
</span><span class='line'>  <span class="l-Scalar-Plain">vid</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="p-Indicator">-</span>
</span><span class='line'>      <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">default_value</span>
</span><span class='line'>      <span class="l-Scalar-Plain">default_value</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">state</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">destination</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">plugin</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">entity:taxonomy_term</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see my CSV source and Iterator in the <a href="https://www.drupal.org/node/2458003">issue queue for migrate_plus</a>. Good luck, and happy migrating!</p>

<h2>Thanks</h2>

<p>I learned a lot this week. Big thanks to the <a href="https://www.drupal.org/node/2127611">Migrate Documentation</a>, but especially to <a href="https://www.drupal.org/u/chx">chx</a>, <a href="https://www.drupal.org/u/mikeryan">mikeryan</a>, and the other good folks in #drupal-migrate who helped set me straight.</p>
]]></content>
  </entry>
  
</feed>
