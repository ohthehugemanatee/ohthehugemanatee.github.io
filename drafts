
<!DOCTYPE html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!--><html class="no-js" lang="en"><!--<![endif]-->
<head>
  <meta charset="utf-8">
  <title>What Is Good Code - Oh The Huge Manatee</title>
  <meta name="author" content="Campbell Vertesi (ohthehugemanatee)">

  
  <meta name="description" content="This is a question I have to define a lot, every time I step in to lead a new team, and it's an important one. Your team has to know the standards &hellip;">
  

  <!-- http://t.co/dKP3o1e -->
  <meta name="HandheldFriendly" content="True">
  <meta name="MobileOptimized" content="320">
  <meta name="viewport" content="width=device-width, initial-scale=1">

  
  <link rel="canonical" href="http://ohthehugemanatee.github.io/drafts">
  <link href="/favicon.png" rel="icon">
  <link href="/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css">
  <link href="/atom.xml" rel="alternate" title="Oh The Huge Manatee" type="application/atom+xml">
  <link href="/stylesheets/table.css" media="screen, projection" rel="stylesheet" type="text/css" />
  <script src="/javascripts/modernizr-2.0.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
  <script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/libs/jquery.min.js"%3E%3C/script%3E'))</script>
  <script src="/javascripts/octopress.js" type="text/javascript"></script>
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts -->
<link href="https://fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link href="https://fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css">
<link rel="stylesheet" href="/stylesheets/fonts/prstartk/stylesheet.css" type="text/css" charset="utf-8" />

  
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-46172182-1']);
    _gaq.push(['_trackPageview']);

    (function() {
      var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
      ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
  </script>


</head>

<body   >
  <header role="banner"><hgroup>
<a href="/" style="float:right"><img  src="/images/oh_the_huge_manatee.png" /></a><div class="titles"><h1><a href="/">Oh The Huge Manatee</a></h1>
  
    <h2>Drupal, Sysadminning, and Tech.</h2>
  
</div>
</hgroup>

</header>
  <nav role="navigation"><ul class="subscription" data-subscription="rss">
  <li><a href="/atom.xml" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li>
  
</ul>
  
<form action="https://www.duckduckgo.com/" method="get">
  <fieldset role="search">
    <input type="hidden" name="sites" value="ohthehugemanatee.org" />
    <input class="search" type="text" name="q" results="0" placeholder="Search&hellip;"/>
  </fieldset>
</form>
  
<ul class="main-navigation">
  <li><a href="/about-me.html">Me</a></li>
  <li><a href="/">Blog</a></li>
  <li><a href="/blog/archives">Archives</a></li>
</ul>

</nav>
  <div id="main">
    <div id="content">
      <div>
<article class="hentry" role="article">
  
  <header>
    
      <h1 class="entry-title">What Is Good Code</h1>
    
    
      <p class="meta">
        








  


<time datetime="2017-07-21T21:04:00+02:00" pubdate data-updated="true">Jul 21<span>st</span>, 2017</time>
        
      </p>
    
  </header>


<div class="entry-content">This is a question I have to define a lot, every time I step in to lead a new team, and it's an important one. Your team has to know the standards against which they are measured, and code reviewers have to understand what they're looking for. A well defined idea of "good code" can make a huge difference in the on-ramp and acceleration speed for new team members, too. I hope this post helps clarify different ways of thinking of this for the other leads out there.

I recognize that it's a bit of hubris for a _PHP specialist_ to make comments about good code. After all, PHP has a (sadly deserved) reputation as the home of amateurs, taking their first stabs at spaghetti procedural lcode in a simple imperative language. But bear in mind that PHP is also the home of some serious "grown-up" development: Wikipedia, Facebook, Slack, and others. Modern PHP development uses modern development practices common to every language. So it's important for any professional modern PHP developer to hold high-falutin' opinions like these.

Writing good code is subject to many of the same rules as writing good prose. Bear with me while I stretch this analogy as far as I can.

Keep your target audience in mind
---

Good prose is targeted to the reader. You write differently for a 7 year old than you would for a popular magazine, and differently again for an essay competition. So, who is your code's target audience?

The answer will vary a bit, but I can tell you who is not your target audience: the computer. We're all writing in compiled languages now. Comments are free. Extra lines are free. There's a good reason that every modern coding standard includes rules like "no assignments in conditionals". It's because in a compiled language, _the compiler does all the work to translate your code for the computer._ Your target reader is guaranteed to be some kind of human.

So no matter what, we can say that:

``` php
if ($value = \Entity::load(123)) {
  ...
}
```

is worse than:

``` php
// Load the entity.
$value = \Entity::load(123);
if (!empty($value)) {
  ...
}
```

And not just because some arbitrary coding standard said so!

Immediately my _reducto ad absurdum_ sensor starts to go off - you can write insane code this way, if you go too far. 

``` php
// Initialize the $value variable. We'll use this later.
$value = NULL;
// Try loading the entity.
$value = \Entity::load(123);
// React only if the entity loaded OK, and if it's a sane entity.
if (!empty($value) && $value instanceof \EntityInterface) {
  ...
}
```

Is this better than the examples above? I certainly wouldn't enjoy writing this way, or reading it. But depending on your target reader, this might be just the way to go. If you're writing an examples package, or a demonstration for a blog post, then this is not so crazy after all. 

So consider your audience. In most of my work I try to imagine a new developer on the team. When I know I'm writing to open source something, I imagine the pedantic community reviewers. Think about their skill level, their approach to the codebase, how much they understand the framework, and write for them. 

Name semantically
---

Since your target audience is human, they will appreciate having things named for what they are or how they function. This is actually quite hard - there's a reason that "naming things" is one of the famous two hardest problems in programming! Whenever possible, remember the nouns/verbs metaphor you learned from object oriented 101, and try to name according to what the thing IS or what it DOES. (if it falls into both categories, refactor and thank me later). Remember that your names are all metaphors, and be careful of ambiguities.

My favorite pet peeve is the word "Controller." Easily the most abused word in the PHP class-naming lexicon, and it's a useless buzzword. Is the ThingieController like a nintendo controller, a control panel for interacting with an individual Thingie? Is it the person who regulates Thingie inputs and outputs? Is it a class that collects Thingies, or something that changes them? In Drupal, it's likely to be the class responsible for Thingie routes. And it's likely to make me swear at the screen under my breath.

If you want to pass my code review, never name _anything_ "Controller". If you call something "Manager" you'll get the same dirty looks -I don't care if you caught that bad habit from Java, it's a bad habit and I won't have it in my codebase!

Try to describe _completely_ what the thing IS or DOES. For functions, describe the return (ie "getUserAccount"). If the name gets ridiculously long, that's a code smell and it's time to refactor. 

Order matters
---

Humans learn things by connecting them to each other. That is to say, that in order for a concept to make sense, it cannot exist in a vacuum. This means that when explaining something complex - like a board game or a class - you should always start from the big points, or the points that connect to the rest of the framework, and go from there.

In a well structured class, I expect to see the constructor method(s) at the top, and then the methods starting from biggest overview to smallest detail. Properties should go right before their assigning method, which 99.9% of the time means at the top of the class - enough to say that "all properties go at the top of the class" is a perfectly fine rule of thumb. 

This concept of explaining from largest to smallest, only adding nouns as they're needed, is easy to illustrate. Here's a simplified explanation of the board game _Settlers of Catan_:

* You build settlements by spending resources.
* You collect resources every time someone throws a number touching one of your existing settlements.
* You can also buy a Development card, which gives you certain bonuses.
* You can trade with anyone on your turn.
* Each settlement is worth 1 point.
* The first to 10 points wins.

This is actually quite a difficult way to explain the game! The listener has to keep all the previous 5 points in their head before getting the one piece of information that integrates it all. If we put the big goal first, we can attach every point to the ones before it.

* The first to 10 points wins.
* Each settlement is worth 1 point.
* You build settlements by spending resources. 
* You can also buy a Development card, which gives you certain bonuses.
* You collect resources every time someone throws a number touching one of your existing settlements.
* You can trade with anyone on your turn.

Similarly in your code, start with the big concept first. What does this class do? It is not crazy to have this "main" method just call a bunch of component methods. If you name them clearly, this can be a great experience for the reader.

```php
  public function getFieldValuesFromData(\SimpleXML $data) : array {
    $this->addXpathNamespaces($data);
    $documentId = $this->getDocumentId($data);
    $fieldMapping = $this->getFieldMapping($documentId);
    $rawFieldValues = $this->applyFieldMapping($fieldMapping, $data);
    return $this->filterFieldValues($rawFieldValues);
  }

```

This barely even needs comments, it's so clear what's going on. In a well-structured class, this would be right at the top (after `__construct()`), and the other methods would appear in call order below. 

(Note that this is probably pretty hard to unit test. The one public function is just glue, and it's definitely implied that all the others are protected methods, hiding the actual unit testable logic of the class. Actually you would want to move the key functionality into the public methods of other classes, so they're testable there.)


Write descriptive tests
---

One of the purposes of your test, is to explain your thought process and the intended functionality to the reader. It's a form of documentation. I should be able to skim down to the `Assert`s, and get a good idea of what your code is supposed to do. This can be tricky, particularly if you're bad at separation of concerns (or in a framework that's bad at it - I'm looking at you, Drupal). It often (for me) requires refactoring the code in the SUT to be equally clear. But it's worthwhile.

In my code reviews, we often look at the tests first for this reason. The first thing I want is a description of the objectives, and the tests should give me that.

Be consistent
---

Perhaps above all else: be consistent in your names. That means all your id functions should be named identically. Don't intermingle "get" and "retrieve" words. Try and maintain the opposites principle (create methods in opposite pairs when possible, ie getters/setters. Pick a naming style (camelCase, StudlyCaps, undderscores, or something else, I ont care), and stick with it. Configure your IDE to be as anal-retentive as possible about code style, and clear up _all_ the coding style notices before you commit.
</div>


  <footer>
    <p class="meta">
      
  

<span class="byline author vcard">Posted by <span class="fn">Campbell Vertesi (ohthehugemanatee)</span></span>

      








  


<time datetime="2017-07-21T21:04:00+02:00" pubdate data-updated="true">Jul 21<span>st</span>, 2017</time>
      

<span class="categories">
  
    <a class='category' href='/blog/categories/code-style/'>code style</a>, <a class='category' href='/blog/categories/php/'>php</a>
  
</span>


    </p>
    
      <div class="sharing">
  
  <a href="//twitter.com/share" class="twitter-share-button" data-url="http://ohthehugemanatee.github.io/drafts" data-via="campbellvertesi" data-counturl="http://ohthehugemanatee.github.io/drafts" >Tweet</a>
  
  
  <div class="g-plusone" data-size="medium"></div>
  
  
    <div class="fb-like" data-send="true" data-width="450" data-show-faces="false"></div>
  
</div>

    
    <p class="meta">
      
      
    </p>
  </footer>
</article>

  <section>
    <h1>Comments</h1>
    <div id="disqus_thread" aria-live="polite"><noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
</div>
  </section>

</div>

<aside class="sidebar">
  
    <section>
<h1>About</h1>
<p>My name is <a href="https://campbell.vertesi.com/" title="Campbell Vertesi">Campbell Vertesi</a>. I'm a technical architect with <a href="https://microsoft.com/" title="Microsoft">Microsoft</a>, and an <a href="https://thecastmusic.com/" title="The Cast - the opera band">opera singer</a>.</p>

<p>I've been working with computers for 21 years, with PHP and Drupal for 13 of those. I started with desktop repair, moved into sysadmin work, and eventually discovered web development. Since then I've been in most roles in the web consultant ecosystem: coder, themer, project manager, information architect, technical lead, CEO, and CTO. I've presented at many conferences, including almost 20 Drupalcons. <a href="/about-me.html" title="More about me">More about me</a>.</p>

<p>This is a technical blog that's partly a reference for myself, partly a pointer for all the instructions I end up writing for others, and partly a document of my technical history. I'm involved in a lot of different fields and specialties, and it's nice to have it all catalogued somewhere. I've written this blog on various platforms under different names, but this is where I'm hoping it will stay for awhile.</p>

<p>I'm not responsible for any damage caused to yourself, your family, your friends, your pets, or anything else as the result of using the information on this blog. Be smart and be careful.</p>
</section><section>
  <h1>Recent Posts</h1>
  <ul id="recent_posts">
    
      <li class="post">
        <a href="/blog/2018/01/08/im-joining-microsoft-to-do-open-source-right/">I'm Joining Microsoft, to Do Open Source Right</a>
      </li>
    
      <li class="post">
        <a href="/blog/2017/08/04/the-only-3-tools-you-need-to-become-a-rock-star-developer/">The 3 Skills You Need to Become a Rock Star Developer</a>
      </li>
    
      <li class="post">
        <a href="/blog/2017/07/28/bring-php-to-drupalcon/">Why No Mainstream PHP Speakers Come to Drupalcon - and How We're Changing That</a>
      </li>
    
      <li class="post">
        <a href="/blog/2017/06/17/that-time-i-resurrected-my-linux-macbook-pro/">That Time I Resurrected My Linux MacBook Pro</a>
      </li>
    
      <li class="post">
        <a href="/blog/2017/06/15/better-php-better-drupalists/">Better PHP === Better Drupalists: The PHP Track at Drupalcon Vienna</a>
      </li>
    
  </ul>
</section>

<section>
  <h1>GitHub Repos</h1>
  <ul id="gh_repos">
    <li class="loading">Status updating...</li>
  </ul>
  
  <a href="https://github.com/ohthehugemanatee">@ohthehugemanatee</a> on GitHub
  
  <script type="text/javascript">
    $(document).ready(function(){
        if (!window.jXHR){
            var jxhr = document.createElement('script');
            jxhr.type = 'text/javascript';
            jxhr.src = '/javascripts/libs/jXHR.js';
            var s = document.getElementsByTagName('script')[0];
            s.parentNode.insertBefore(jxhr, s);
        }

        github.showRepos({
            user: 'ohthehugemanatee',
            count: 0,
            skip_forks: true,
            target: '#gh_repos'
        });
    });
  </script>
  <script src="/javascripts/github.js" type="text/javascript"> </script>
</section>




<section>
<a class="twitter-timeline"  href="https://twitter.com/campbellvertesi"  data-widget-id="407927984901746688">Tweets by @campbellvertesi</a>
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>

    </section>

  
</aside>


    </div>
  </div>
  <footer role="contentinfo"><p>
  Copyright &copy; 2018 - Campbell Vertesi (ohthehugemanatee) -
  <span class="credit">Powered by <a href="http://octopress.org">Octopress</a></span>
</p>

</footer>
  

<script type="text/javascript">
      var disqus_shortname = 'ohthehugemanatee';
      
        
        // var disqus_developer = 1;
        var disqus_identifier = 'http://ohthehugemanatee.github.io/drafts';
        var disqus_url = 'http://ohthehugemanatee.github.io/drafts';
        var disqus_script = 'embed.js';
      
    (function () {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/' + disqus_script;
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    }());
</script>



<div id="fb-root"></div>
<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) {return;}
  js = d.createElement(s); js.id = id; js.async = true;
  js.src = "//connect.facebook.net/en_US/all.js#appId=212934732101925&xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>



  <script type="text/javascript">
    (function() {
      var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
      script.src = 'https://apis.google.com/js/plusone.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(script, s);
    })();
  </script>



  <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = '//platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script>





</body>
</html>
